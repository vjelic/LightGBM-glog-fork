{
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "Glog.AI",
          "organization": "Glog.AI",
          "fullName": "Glog, Making software more secure",
          "version": "1.0.0",
          "semanticVersion": "1.0.0",
          "informationUri": "https://www.glog.ai",
          "rules": [
            {
              "id": "glog-5368a726-5d6b-4eb4-85cd-8584f30d967a",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-5742cdaf-e328-43a1-85df-c00c0a2a2c83",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-f3e47195-2cad-45f9-bda4-993f2fa47255",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-262561f9-60d7-4a43-868a-5713fe8366ee",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-7583d6c7-c005-400d-861e-5aabb5b4bc37",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-77334bb5-b6ff-47f2-947a-5ab275236d50",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-bf846ea5-62c2-4c61-963c-271188c286ca",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS148264"
                ]
              }
            },
            {
              "id": "glog-49b8c7d8-940c-4ba4-a67c-aee2d110f6ca",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-9d8273ea-ed2e-435f-bb04-9346ede573ab",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-eb1b3c4e-9286-43dc-83cc-6f76ee5fcdba",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-f90f154d-a9b5-4170-ab0b-84d3a4a54f41",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-ac1f73fa-e5c9-4e6e-9204-1a8e68482169",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS161085"
                ]
              }
            },
            {
              "id": "glog-e04b7574-751b-42b3-b01c-48628cd361c8",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-07e9c79b-2a00-4133-a329-3a21ccf362e8",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-dddbf555-c553-4420-960a-840248477b2c",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-96a05287-61d1-4167-9047-f935e1d739d4",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-208db4ca-ab8b-4fed-aaf6-5646ad3d64de",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-c7803c40-72f0-4b02-8d6a-ce0279e26e61",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-2bf1a5a9-f5ce-4864-b336-469105682c22",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-149c4dbd-fec6-4513-aed3-008b08f9369a",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-16d83562-1eab-4086-aef5-ffa27e440a24",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-3aa27f92-623d-45ad-a6aa-3879f1f271c2",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-224dc1b2-645d-4d02-9d79-7e076cafa157",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-af3c9c30-521f-4807-8b4b-fb5b614e0894",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-61322cd7-35d4-4fc0-8fa5-37b70b9b2721",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-2db801c1-3bf3-4cf2-b014-c5d9d14dd585",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-dc5e661d-ab60-4b08-808d-4ab5173a8041",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-3eff0ba6-f0ca-4c80-8e0d-fdf438077060",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-96107efb-b3f3-44ac-b534-1bf3ac0c6a41",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-5ec7f5e2-f012-4161-8cac-9479aca32f40",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-8b7e6d3a-adf1-4258-98e3-0e2a477d5ec6",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-ceba33fd-1411-4eeb-8722-67c23678a7af",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-a5cfd2c5-666e-4274-8529-bf2d3db7ed36",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-735b2138-b7d5-47d2-8104-0c34156030c7",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-2d5ec8f3-c693-414f-8303-5a6873613779",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS111237"
                ]
              }
            },
            {
              "id": "glog-44e84a08-88f7-4267-b924-95dfac129b9c",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-774c330d-5bef-45c6-b909-fe7338595f9b",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-4292f422-984a-4d3f-88f1-042be20c5718",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS148264"
                ]
              }
            },
            {
              "id": "glog-3991de0f-c98c-4e4e-b71b-2fd48f018969",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS140021"
                ]
              }
            },
            {
              "id": "glog-2bf62987-fade-43f6-8d7e-fd3e522ec9aa",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS140021"
                ]
              }
            },
            {
              "id": "glog-64fb37f1-dd6b-4c3f-8890-7fc187258121",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS148264"
                ]
              }
            },
            {
              "id": "glog-5715417b-f9fa-4911-8871-3b1e34036634",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS140021"
                ]
              }
            },
            {
              "id": "glog-a8f916a9-2bcf-47df-af24-9bcdca5f2e3e",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-2931ea7e-d1ba-4a8c-9e85-e677277827f5",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-6d4bf3ae-1bc5-4a6a-bf7b-bdd91da9f8ac",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-23af4d56-188e-4116-aa08-821dad42cc24",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-066fbfaf-857e-4324-9bdd-ce982fd976f3",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-1d433144-02ef-459b-8801-8b10b0c6fd40",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-f2538d1c-e6f2-4ce3-a9ab-adfd2c713ca2",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-3a455dda-d709-4e0f-bd6c-f6989b314066",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-d4cd1bca-a193-4fcc-8db0-78806539d19b",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-405be20b-792b-4f2b-8786-5eab1896eb74",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-7ffbb7b3-6a62-4d3b-9e1a-7084dd56c450",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-da951876-e721-4b43-a519-5495eaf19662",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-2bda6ead-c8f4-465f-8d42-9ab80a434053",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-af9baf3e-7e55-4fa3-9f3d-56a23891e2b2",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-a1eda627-7976-4c87-960e-23df948b4d3d",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS148264"
                ]
              }
            },
            {
              "id": "glog-b9d5c3b8-30e0-4abf-8497-5bb310c826ce",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS140021"
                ]
              }
            },
            {
              "id": "glog-9df5647c-a286-436b-9579-56c2ca73a676",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS140021"
                ]
              }
            },
            {
              "id": "glog-fb1c1daa-32a8-4a49-b46a-b0350950cb01",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-5727645a-a7e6-45a0-8510-21fbe5d8a8ed",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS148264"
                ]
              }
            },
            {
              "id": "glog-ac12076b-f432-4b07-a803-f4c20d3b4c1a",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-9d07d507-ef5e-4bb7-9592-42a7735bc941",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-6f043ec0-e41f-43de-baa8-e514f8b91c49",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-60966313-8407-44ff-9e66-bd40b0d58a17",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-ac5fb547-7e7c-4465-b996-dbb56509fa42",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-10c5dfe1-4152-467b-9df6-0d7f7a69aea2",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-d41cbc4b-6c5e-4d52-8131-77717f38db0c",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS140021"
                ]
              }
            },
            {
              "id": "glog-7ae41878-ae7c-42c1-97c1-08efa0577b28",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS140021"
                ]
              }
            },
            {
              "id": "glog-eaabec14-cd78-477b-9908-aa06384a6815",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS148264"
                ]
              }
            },
            {
              "id": "glog-a4a60cf7-a8e0-43b6-aa91-5fdd82481ff3",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS148264"
                ]
              }
            },
            {
              "id": "glog-0869e08f-6f00-40e2-85fb-cd0e4e58e62d",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS140021"
                ]
              }
            },
            {
              "id": "glog-ccc497d1-87f6-413c-a874-e61f14673509",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-fb1bd60f-1edd-4a75-b4b8-4313d1c028a1",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-fcff855a-35f9-438a-a0ed-82766638de2c",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-1ccdc8a5-4e59-4527-815f-501776577578",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-9c3961bd-e636-4bc6-b147-52be6e91d09f",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-6d31f8bc-aad4-4674-a19a-f187f0e5ccb9",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-26e82d45-110a-44e6-bfce-0433da2ed906",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-608a93c5-3073-49c1-ba78-3e4664caa2c4",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-c8462633-50fe-4425-bb5c-f6ba032ec8b1",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-bce8d60e-9738-4545-a631-967dfbefb34b",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-949e75d9-5f68-4948-850e-f920f2076eae",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-b7fec5d2-ce8a-4c17-8a8f-983c1316ecb4",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-7debed93-977a-4d36-8e39-39eee9797f0e",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-d850c16b-db7d-4883-9b11-a7b216f9dffa",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-e4171c6d-53e5-4d31-970a-9dbfe3dcdf18",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-6d068876-b09d-48b0-92fa-64f3aeac178d",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-154483aa-4404-4b9a-a282-aa66203eb7b3",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-3b40bc7a-5e21-42b0-ae00-09182d331310",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-a0c2994c-6061-443b-a237-3a534df51434",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-880c1592-f31a-45ff-8e9e-0d7586ee0207",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-6702284b-637f-4f0f-85e7-83b99c8a0ea7",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-33887fc5-3712-4377-8daa-2ead198bad78",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-cab48782-6f23-48b2-b0d3-33804a0d5aff",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-fe3a863e-11ee-4d5c-a36e-2a731426ce21",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-978774ed-99a5-4415-b5d7-22d393897c9a",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-6560a92e-bba5-42bf-bb6c-1aa7e0b5a8f6",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-0e68d067-ace4-44a5-bed3-4f3af519da05",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-672898fe-e582-4214-915d-844a2f37d0ca",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-23eff887-8d8e-404c-96db-8d07f08a2468",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-a29eeb13-5521-40ee-baca-559fc74d6eca",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-243d6153-3bda-47b2-a441-d72d191ab1c8",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-ec86a938-9f84-4299-8815-2e0589d1cc41",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-44e5a11b-3a52-4b62-8175-0b4469ee07bd",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-cf5787fb-dc81-4438-9946-1c53edd620b0",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-5a3797b7-ec30-4427-b5ee-9cd824f69bf8",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-33496603-d019-492c-9ea2-8906c312501f",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-5a50f95a-5c87-4249-a765-397f16ed53b5",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-9ccacc62-f1a2-47ec-add9-827f81f376e2",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-7e6cee94-6117-4150-9e3d-b81ea5ac2430",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-e305720a-212e-4a1a-ae1d-ace44059aa2f",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-f350ac21-0c6b-4f30-9b6a-4df5431fa1da",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-22828490-5b61-4a24-8f6b-a8d6dd6b8ea7",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-10d26d32-2213-4701-9f2e-5b217f0824c7",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-b4381072-df8b-4f3a-a55f-1c22612a8ec8",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS148264"
                ]
              }
            },
            {
              "id": "glog-1423644b-9a61-41f3-8b28-2b07d4c82207",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-803fc717-60ee-4350-b5ec-5b1c75ef8949",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-bb1e57ac-b7c3-4080-b513-0471ab455bc4",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-012107aa-118f-4b99-90c1-68705c306409",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS140021"
                ]
              }
            },
            {
              "id": "glog-87634337-dcc6-47dd-8969-309e48a095de",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-b6cde4ed-8592-45a3-8f57-486ef49fad39",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-1f932a16-114c-4d73-ac29-8530b7d23ff5",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-452a667b-654c-43af-ae87-426dc2b6d62e",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-56b3f534-ff7e-44d1-892a-b5e4236dc8e1",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS185832"
                ]
              }
            },
            {
              "id": "glog-d4783a6b-a01a-42a0-9ec0-3676a1d610a0",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            }
          ],
          "language": "en-US",
          "contents": [
            "localizedData",
            "nonLocalizedData"
          ],
          "isComprehensive": false
        }
      },
      "language": "en-US",
      "results": [
        {
          "ruleId": "glog-f3e47195-2cad-45f9-bda4-993f2fa47255",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/io/metadata.cpp"
                },
                "region": {
                  "startLine": 760,
                  "startColumn": 9,
                  "endLine": 760,
                  "endColumn": 57,
                  "charOffset": 27132,
                  "charLength": 48,
                  "snippet": {
                    "text": "memcpy(weights_.data(), mem_ptr, sizeof(label_t)",
                    "rendered": {
                      "text": "memcpy(weights_.data(), mem_ptr, sizeof(label_t)",
                      "markdown": "`memcpy(weights_.data(), mem_ptr, sizeof(label_t)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/io/metadata.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 27132,
                        "charLength": 48
                      },
                      "insertedContent": {
                        "text": "memcpy_s(weights_.data(), <size of weights_.data()>,  mem_ptr,  sizeof(label_t)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-5368a726-5d6b-4eb4-85cd-8584f30d967a",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/io/metadata.cpp"
                },
                "region": {
                  "startLine": 754,
                  "startColumn": 7,
                  "endLine": 754,
                  "endColumn": 53,
                  "charOffset": 26861,
                  "charLength": 46,
                  "snippet": {
                    "text": "memcpy(label_.data(), mem_ptr, sizeof(label_t)",
                    "rendered": {
                      "text": "memcpy(label_.data(), mem_ptr, sizeof(label_t)",
                      "markdown": "`memcpy(label_.data(), mem_ptr, sizeof(label_t)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/io/metadata.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 26861,
                        "charLength": 46
                      },
                      "insertedContent": {
                        "text": "memcpy_s(label_.data(), <size of label_.data()>,  mem_ptr,  sizeof(label_t)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-5742cdaf-e328-43a1-85df-c00c0a2a2c83",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/io/metadata.cpp"
                },
                "region": {
                  "startLine": 767,
                  "startColumn": 9,
                  "endLine": 767,
                  "endColumn": 70,
                  "charOffset": 27486,
                  "charLength": 61,
                  "snippet": {
                    "text": "memcpy(query_boundaries_.data(), mem_ptr, sizeof(data_size_t)",
                    "rendered": {
                      "text": "memcpy(query_boundaries_.data(), mem_ptr, sizeof(data_size_t)",
                      "markdown": "`memcpy(query_boundaries_.data(), mem_ptr, sizeof(data_size_t)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/io/metadata.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 27486,
                        "charLength": 61
                      },
                      "insertedContent": {
                        "text": "memcpy_s(query_boundaries_.data(), <size of query_boundaries_.data()>,  mem_ptr,  sizeof(data_size_t)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-262561f9-60d7-4a43-868a-5713fe8366ee",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/io/metadata.cpp"
                },
                "region": {
                  "startLine": 574,
                  "startColumn": 2,
                  "endLine": 574,
                  "endColumn": 68,
                  "charOffset": 20394,
                  "charLength": 66,
                  "snippet": {
                    "text": "memcpy(queries_.data() + start_index, queries, sizeof(data_size_t)",
                    "rendered": {
                      "text": "memcpy(queries_.data() + start_index, queries, sizeof(data_size_t)",
                      "markdown": "`memcpy(queries_.data() + start_index, queries, sizeof(data_size_t)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/io/metadata.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 20394,
                        "charLength": 66
                      },
                      "insertedContent": {
                        "text": "memcpy_s(queries_.data() + start_index, <size of queries_.data() + start_index>,  queries,  sizeof(data_size_t)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-7583d6c7-c005-400d-861e-5aabb5b4bc37",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/io/metadata.cpp"
                },
                "region": {
                  "startLine": 436,
                  "startColumn": 2,
                  "endLine": 436,
                  "endColumn": 61,
                  "charOffset": 15954,
                  "charLength": 59,
                  "snippet": {
                    "text": "memcpy(label_.data() + start_index, labels, sizeof(label_t)",
                    "rendered": {
                      "text": "memcpy(label_.data() + start_index, labels, sizeof(label_t)",
                      "markdown": "`memcpy(label_.data() + start_index, labels, sizeof(label_t)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/io/metadata.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 15954,
                        "charLength": 59
                      },
                      "insertedContent": {
                        "text": "memcpy_s(label_.data() + start_index, <size of label_.data() + start_index>,  labels,  sizeof(label_t)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-77334bb5-b6ff-47f2-947a-5ab275236d50",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/io/metadata.cpp"
                },
                "region": {
                  "startLine": 400,
                  "startColumn": 4,
                  "endLine": 400,
                  "endColumn": 88,
                  "charOffset": 14776,
                  "charLength": 84,
                  "snippet": {
                    "text": "memcpy(init_score_.data() + dest_offset, init_scores + source_offset, sizeof(double)",
                    "rendered": {
                      "text": "memcpy(init_score_.data() + dest_offset, init_scores + source_offset, sizeof(double)",
                      "markdown": "`memcpy(init_score_.data() + dest_offset, init_scores + source_offset, sizeof(double)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/io/metadata.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 14776,
                        "charLength": 84
                      },
                      "insertedContent": {
                        "text": "memcpy_s(init_score_.data() + dest_offset, <size of init_score_.data() + dest_offset>,  init_scores + source_offset,  sizeof(double)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-bf846ea5-62c2-4c61-963c-271188c286ca",
          "kind": "fail",
          "level": "error",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/treelearner/feature_histogram.hpp"
                },
                "region": {
                  "startLine": 1724,
                  "startColumn": 35,
                  "endLine": 1724,
                  "endColumn": 42,
                  "charOffset": 75365,
                  "charLength": 7,
                  "snippet": {
                    "text": "Random(",
                    "rendered": {
                      "text": "Random(",
                      "markdown": "`Random(`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.PRNG.Weak"
            ]
          }
        },
        {
          "ruleId": "glog-49b8c7d8-940c-4ba4-a67c-aee2d110f6ca",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/io/metadata.cpp"
                },
                "region": {
                  "startLine": 480,
                  "startColumn": 2,
                  "endLine": 480,
                  "endColumn": 64,
                  "charOffset": 17328,
                  "charLength": 62,
                  "snippet": {
                    "text": "memcpy(weights_.data() + start_index, weights, sizeof(label_t)",
                    "rendered": {
                      "text": "memcpy(weights_.data() + start_index, weights, sizeof(label_t)",
                      "markdown": "`memcpy(weights_.data() + start_index, weights, sizeof(label_t)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/io/metadata.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 17328,
                        "charLength": 62
                      },
                      "insertedContent": {
                        "text": "memcpy_s(weights_.data() + start_index, <size of weights_.data() + start_index>,  weights,  sizeof(label_t)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-9d8273ea-ed2e-435f-bb04-9346ede573ab",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/treelearner/feature_histogram.hpp"
                },
                "region": {
                  "startLine": 971,
                  "startColumn": 9,
                  "endLine": 972,
                  "endColumn": 48,
                  "charOffset": 41527,
                  "charLength": 81,
                  "snippet": {
                    "text": "memcpy(data_int16_, memory_data,\n                (meta_->num_bin - meta_->offset)",
                    "rendered": {
                      "text": "memcpy(data_int16_, memory_data,\n                (meta_->num_bin - meta_->offset)",
                      "markdown": "`memcpy(data_int16_, memory_data,\n                (meta_->num_bin - meta_->offset)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/treelearner/feature_histogram.hpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 41527,
                        "charLength": 81
                      },
                      "insertedContent": {
                        "text": "memcpy_s(data_int16_, <size of data_int16_>,  memory_data, \n                (meta_->num_bin - meta_->offset)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-eb1b3c4e-9286-43dc-83cc-6f76ee5fcdba",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/treelearner/feature_histogram.hpp"
                },
                "region": {
                  "startLine": 966,
                  "startColumn": 9,
                  "endLine": 967,
                  "endColumn": 48,
                  "charOffset": 41369,
                  "charLength": 75,
                  "snippet": {
                    "text": "memcpy(data_, memory_data,\n                (meta_->num_bin - meta_->offset)",
                    "rendered": {
                      "text": "memcpy(data_, memory_data,\n                (meta_->num_bin - meta_->offset)",
                      "markdown": "`memcpy(data_, memory_data,\n                (meta_->num_bin - meta_->offset)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/treelearner/feature_histogram.hpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 41369,
                        "charLength": 75
                      },
                      "insertedContent": {
                        "text": "memcpy_s(data_, <size of data_>,  memory_data, \n                (meta_->num_bin - meta_->offset)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-f90f154d-a9b5-4170-ab0b-84d3a4a54f41",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/treelearner/feature_histogram.hpp"
                },
                "region": {
                  "startLine": 961,
                  "startColumn": 9,
                  "endLine": 962,
                  "endColumn": 48,
                  "charOffset": 41216,
                  "charLength": 75,
                  "snippet": {
                    "text": "memcpy(data_, memory_data,\n                (meta_->num_bin - meta_->offset)",
                    "rendered": {
                      "text": "memcpy(data_, memory_data,\n                (meta_->num_bin - meta_->offset)",
                      "markdown": "`memcpy(data_, memory_data,\n                (meta_->num_bin - meta_->offset)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/treelearner/feature_histogram.hpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 41216,
                        "charLength": 75
                      },
                      "insertedContent": {
                        "text": "memcpy_s(data_, <size of data_>,  memory_data, \n                (meta_->num_bin - meta_->offset)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-ac1f73fa-e5c9-4e6e-9204-1a8e68482169",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "include/LightGBM/utils/common.h"
                },
                "region": {
                  "startLine": 53,
                  "startColumn": 25,
                  "endLine": 53,
                  "endColumn": 34,
                  "charOffset": 1380,
                  "charLength": 9,
                  "snippet": {
                    "text": "malloc(a)",
                    "rendered": {
                      "text": "malloc(a)",
                      "markdown": "`malloc(a)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If the value provided to malloc is the result of unsafe integer math, it can result in an exploitable condition. "
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "include/LightGBM/utils/common.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1380,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "calloc(<number of elements>, <size of each element>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-e04b7574-751b-42b3-b01c-48628cd361c8",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/io/bin.cpp"
                },
                "region": {
                  "startLine": 558,
                  "startColumn": 11,
                  "endLine": 558,
                  "endColumn": 75,
                  "charOffset": 22444,
                  "charLength": 64,
                  "snippet": {
                    "text": "memcpy(bin_2_categorical_.data(), buffer, num_bin_ * sizeof(int)",
                    "rendered": {
                      "text": "memcpy(bin_2_categorical_.data(), buffer, num_bin_ * sizeof(int)",
                      "markdown": "`memcpy(bin_2_categorical_.data(), buffer, num_bin_ * sizeof(int)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/io/bin.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 22444,
                        "charLength": 64
                      },
                      "insertedContent": {
                        "text": "memcpy_s(bin_2_categorical_.data(), <size of bin_2_categorical_.data()>,  buffer,  num_bin_ * sizeof(int)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-07e9c79b-2a00-4133-a329-3a21ccf362e8",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/io/bin.cpp"
                },
                "region": {
                  "startLine": 555,
                  "startColumn": 11,
                  "endLine": 555,
                  "endColumn": 76,
                  "charOffset": 22297,
                  "charLength": 65,
                  "snippet": {
                    "text": "memcpy(bin_upper_bound_.data(), buffer, num_bin_ * sizeof(double)",
                    "rendered": {
                      "text": "memcpy(bin_upper_bound_.data(), buffer, num_bin_ * sizeof(double)",
                      "markdown": "`memcpy(bin_upper_bound_.data(), buffer, num_bin_ * sizeof(double)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/io/bin.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 22297,
                        "charLength": 65
                      },
                      "insertedContent": {
                        "text": "memcpy_s(bin_upper_bound_.data(), <size of bin_upper_bound_.data()>,  buffer,  num_bin_ * sizeof(double)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-dddbf555-c553-4420-960a-840248477b2c",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/io/bin.cpp"
                },
                "region": {
                  "startLine": 551,
                  "startColumn": 9,
                  "endLine": 551,
                  "endColumn": 63,
                  "charOffset": 22057,
                  "charLength": 54,
                  "snippet": {
                    "text": "memcpy(&most_freq_bin_, buffer, sizeof(most_freq_bin_)",
                    "rendered": {
                      "text": "memcpy(&most_freq_bin_, buffer, sizeof(most_freq_bin_)",
                      "markdown": "`memcpy(&most_freq_bin_, buffer, sizeof(most_freq_bin_)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/io/bin.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 22057,
                        "charLength": 54
                      },
                      "insertedContent": {
                        "text": "memcpy_s(&most_freq_bin_, <size of &most_freq_bin_>,  buffer,  sizeof(most_freq_bin_)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-96a05287-61d1-4167-9047-f935e1d739d4",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/io/bin.cpp"
                },
                "region": {
                  "startLine": 549,
                  "startColumn": 9,
                  "endLine": 549,
                  "endColumn": 59,
                  "charOffset": 21927,
                  "charLength": 50,
                  "snippet": {
                    "text": "memcpy(&default_bin_, buffer, sizeof(default_bin_)",
                    "rendered": {
                      "text": "memcpy(&default_bin_, buffer, sizeof(default_bin_)",
                      "markdown": "`memcpy(&default_bin_, buffer, sizeof(default_bin_)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/io/bin.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 21927,
                        "charLength": 50
                      },
                      "insertedContent": {
                        "text": "memcpy_s(&default_bin_, <size of &default_bin_>,  buffer,  sizeof(default_bin_)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-208db4ca-ab8b-4fed-aaf6-5646ad3d64de",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/io/bin.cpp"
                },
                "region": {
                  "startLine": 547,
                  "startColumn": 9,
                  "endLine": 547,
                  "endColumn": 51,
                  "charOffset": 21841,
                  "charLength": 42,
                  "snippet": {
                    "text": "memcpy(&max_val_, buffer, sizeof(max_val_)",
                    "rendered": {
                      "text": "memcpy(&max_val_, buffer, sizeof(max_val_)",
                      "markdown": "`memcpy(&max_val_, buffer, sizeof(max_val_)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/io/bin.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 21841,
                        "charLength": 42
                      },
                      "insertedContent": {
                        "text": "memcpy_s(&max_val_, <size of &max_val_>,  buffer,  sizeof(max_val_)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-c7803c40-72f0-4b02-8d6a-ce0279e26e61",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/io/bin.cpp"
                },
                "region": {
                  "startLine": 545,
                  "startColumn": 9,
                  "endLine": 545,
                  "endColumn": 51,
                  "charOffset": 21755,
                  "charLength": 42,
                  "snippet": {
                    "text": "memcpy(&min_val_, buffer, sizeof(min_val_)",
                    "rendered": {
                      "text": "memcpy(&min_val_, buffer, sizeof(min_val_)",
                      "markdown": "`memcpy(&min_val_, buffer, sizeof(min_val_)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/io/bin.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 21755,
                        "charLength": 42
                      },
                      "insertedContent": {
                        "text": "memcpy_s(&min_val_, <size of &min_val_>,  buffer,  sizeof(min_val_)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-2bf1a5a9-f5ce-4864-b336-469105682c22",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/io/bin.cpp"
                },
                "region": {
                  "startLine": 543,
                  "startColumn": 9,
                  "endLine": 543,
                  "endColumn": 53,
                  "charOffset": 21634,
                  "charLength": 44,
                  "snippet": {
                    "text": "memcpy(&bin_type_, buffer, sizeof(bin_type_)",
                    "rendered": {
                      "text": "memcpy(&bin_type_, buffer, sizeof(bin_type_)",
                      "markdown": "`memcpy(&bin_type_, buffer, sizeof(bin_type_)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/io/bin.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 21634,
                        "charLength": 44
                      },
                      "insertedContent": {
                        "text": "memcpy_s(&bin_type_, <size of &bin_type_>,  buffer,  sizeof(bin_type_)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-149c4dbd-fec6-4513-aed3-008b08f9369a",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/io/bin.cpp"
                },
                "region": {
                  "startLine": 541,
                  "startColumn": 9,
                  "endLine": 541,
                  "endColumn": 59,
                  "charOffset": 21536,
                  "charLength": 50,
                  "snippet": {
                    "text": "memcpy(&sparse_rate_, buffer, sizeof(sparse_rate_)",
                    "rendered": {
                      "text": "memcpy(&sparse_rate_, buffer, sizeof(sparse_rate_)",
                      "markdown": "`memcpy(&sparse_rate_, buffer, sizeof(sparse_rate_)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/io/bin.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 21536,
                        "charLength": 50
                      },
                      "insertedContent": {
                        "text": "memcpy_s(&sparse_rate_, <size of &sparse_rate_>,  buffer,  sizeof(sparse_rate_)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-16d83562-1eab-4086-aef5-ffa27e440a24",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/io/bin.cpp"
                },
                "region": {
                  "startLine": 539,
                  "startColumn": 9,
                  "endLine": 539,
                  "endColumn": 57,
                  "charOffset": 21409,
                  "charLength": 48,
                  "snippet": {
                    "text": "memcpy(&is_trivial_, buffer, sizeof(is_trivial_)",
                    "rendered": {
                      "text": "memcpy(&is_trivial_, buffer, sizeof(is_trivial_)",
                      "markdown": "`memcpy(&is_trivial_, buffer, sizeof(is_trivial_)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/io/bin.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 21409,
                        "charLength": 48
                      },
                      "insertedContent": {
                        "text": "memcpy_s(&is_trivial_, <size of &is_trivial_>,  buffer,  sizeof(is_trivial_)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-3aa27f92-623d-45ad-a6aa-3879f1f271c2",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/io/bin.cpp"
                },
                "region": {
                  "startLine": 537,
                  "startColumn": 9,
                  "endLine": 537,
                  "endColumn": 61,
                  "charOffset": 21276,
                  "charLength": 52,
                  "snippet": {
                    "text": "memcpy(&missing_type_, buffer, sizeof(missing_type_)",
                    "rendered": {
                      "text": "memcpy(&missing_type_, buffer, sizeof(missing_type_)",
                      "markdown": "`memcpy(&missing_type_, buffer, sizeof(missing_type_)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/io/bin.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 21276,
                        "charLength": 52
                      },
                      "insertedContent": {
                        "text": "memcpy_s(&missing_type_, <size of &missing_type_>,  buffer,  sizeof(missing_type_)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-224dc1b2-645d-4d02-9d79-7e076cafa157",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/io/bin.cpp"
                },
                "region": {
                  "startLine": 535,
                  "startColumn": 9,
                  "endLine": 535,
                  "endColumn": 51,
                  "charOffset": 21158,
                  "charLength": 42,
                  "snippet": {
                    "text": "memcpy(&num_bin_, buffer, sizeof(num_bin_)",
                    "rendered": {
                      "text": "memcpy(&num_bin_, buffer, sizeof(num_bin_)",
                      "markdown": "`memcpy(&num_bin_, buffer, sizeof(num_bin_)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/io/bin.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 21158,
                        "charLength": 42
                      },
                      "insertedContent": {
                        "text": "memcpy_s(&num_bin_, <size of &num_bin_>,  buffer,  sizeof(num_bin_)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-af3c9c30-521f-4807-8b4b-fb5b614e0894",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/io/bin.cpp"
                },
                "region": {
                  "startLine": 530,
                  "startColumn": 11,
                  "endLine": 530,
                  "endColumn": 75,
                  "charOffset": 21021,
                  "charLength": 64,
                  "snippet": {
                    "text": "memcpy(buffer, bin_2_categorical_.data(), num_bin_ * sizeof(int)",
                    "rendered": {
                      "text": "memcpy(buffer, bin_2_categorical_.data(), num_bin_ * sizeof(int)",
                      "markdown": "`memcpy(buffer, bin_2_categorical_.data(), num_bin_ * sizeof(int)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/io/bin.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 21021,
                        "charLength": 64
                      },
                      "insertedContent": {
                        "text": "memcpy_s(buffer, <size of buffer>,  bin_2_categorical_.data(),  num_bin_ * sizeof(int)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-61322cd7-35d4-4fc0-8fa5-37b70b9b2721",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/io/bin.cpp"
                },
                "region": {
                  "startLine": 528,
                  "startColumn": 11,
                  "endLine": 528,
                  "endColumn": 76,
                  "charOffset": 20929,
                  "charLength": 65,
                  "snippet": {
                    "text": "memcpy(buffer, bin_upper_bound_.data(), num_bin_ * sizeof(double)",
                    "rendered": {
                      "text": "memcpy(buffer, bin_upper_bound_.data(), num_bin_ * sizeof(double)",
                      "markdown": "`memcpy(buffer, bin_upper_bound_.data(), num_bin_ * sizeof(double)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/io/bin.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 20929,
                        "charLength": 65
                      },
                      "insertedContent": {
                        "text": "memcpy_s(buffer, <size of buffer>,  bin_upper_bound_.data(),  num_bin_ * sizeof(double)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-2db801c1-3bf3-4cf2-b014-c5d9d14dd585",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/io/bin.cpp"
                },
                "region": {
                  "startLine": 525,
                  "startColumn": 9,
                  "endLine": 525,
                  "endColumn": 63,
                  "charOffset": 20745,
                  "charLength": 54,
                  "snippet": {
                    "text": "memcpy(buffer, &most_freq_bin_, sizeof(most_freq_bin_)",
                    "rendered": {
                      "text": "memcpy(buffer, &most_freq_bin_, sizeof(most_freq_bin_)",
                      "markdown": "`memcpy(buffer, &most_freq_bin_, sizeof(most_freq_bin_)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/io/bin.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 20745,
                        "charLength": 54
                      },
                      "insertedContent": {
                        "text": "memcpy_s(buffer, <size of buffer>,  &most_freq_bin_,  sizeof(most_freq_bin_)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-dc5e661d-ab60-4b08-808d-4ab5173a8041",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/io/bin.cpp"
                },
                "region": {
                  "startLine": 523,
                  "startColumn": 9,
                  "endLine": 523,
                  "endColumn": 59,
                  "charOffset": 20615,
                  "charLength": 50,
                  "snippet": {
                    "text": "memcpy(buffer, &default_bin_, sizeof(default_bin_)",
                    "rendered": {
                      "text": "memcpy(buffer, &default_bin_, sizeof(default_bin_)",
                      "markdown": "`memcpy(buffer, &default_bin_, sizeof(default_bin_)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/io/bin.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 20615,
                        "charLength": 50
                      },
                      "insertedContent": {
                        "text": "memcpy_s(buffer, <size of buffer>,  &default_bin_,  sizeof(default_bin_)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-3eff0ba6-f0ca-4c80-8e0d-fdf438077060",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/io/bin.cpp"
                },
                "region": {
                  "startLine": 521,
                  "startColumn": 9,
                  "endLine": 521,
                  "endColumn": 51,
                  "charOffset": 20529,
                  "charLength": 42,
                  "snippet": {
                    "text": "memcpy(buffer, &max_val_, sizeof(max_val_)",
                    "rendered": {
                      "text": "memcpy(buffer, &max_val_, sizeof(max_val_)",
                      "markdown": "`memcpy(buffer, &max_val_, sizeof(max_val_)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/io/bin.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 20529,
                        "charLength": 42
                      },
                      "insertedContent": {
                        "text": "memcpy_s(buffer, <size of buffer>,  &max_val_,  sizeof(max_val_)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-96107efb-b3f3-44ac-b534-1bf3ac0c6a41",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/io/bin.cpp"
                },
                "region": {
                  "startLine": 519,
                  "startColumn": 9,
                  "endLine": 519,
                  "endColumn": 51,
                  "charOffset": 20443,
                  "charLength": 42,
                  "snippet": {
                    "text": "memcpy(buffer, &min_val_, sizeof(min_val_)",
                    "rendered": {
                      "text": "memcpy(buffer, &min_val_, sizeof(min_val_)",
                      "markdown": "`memcpy(buffer, &min_val_, sizeof(min_val_)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/io/bin.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 20443,
                        "charLength": 42
                      },
                      "insertedContent": {
                        "text": "memcpy_s(buffer, <size of buffer>,  &min_val_,  sizeof(min_val_)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-5ec7f5e2-f012-4161-8cac-9479aca32f40",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/io/bin.cpp"
                },
                "region": {
                  "startLine": 517,
                  "startColumn": 9,
                  "endLine": 517,
                  "endColumn": 53,
                  "charOffset": 20322,
                  "charLength": 44,
                  "snippet": {
                    "text": "memcpy(buffer, &bin_type_, sizeof(bin_type_)",
                    "rendered": {
                      "text": "memcpy(buffer, &bin_type_, sizeof(bin_type_)",
                      "markdown": "`memcpy(buffer, &bin_type_, sizeof(bin_type_)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/io/bin.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 20322,
                        "charLength": 44
                      },
                      "insertedContent": {
                        "text": "memcpy_s(buffer, <size of buffer>,  &bin_type_,  sizeof(bin_type_)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-8b7e6d3a-adf1-4258-98e3-0e2a477d5ec6",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/io/bin.cpp"
                },
                "region": {
                  "startLine": 515,
                  "startColumn": 9,
                  "endLine": 515,
                  "endColumn": 59,
                  "charOffset": 20224,
                  "charLength": 50,
                  "snippet": {
                    "text": "memcpy(buffer, &sparse_rate_, sizeof(sparse_rate_)",
                    "rendered": {
                      "text": "memcpy(buffer, &sparse_rate_, sizeof(sparse_rate_)",
                      "markdown": "`memcpy(buffer, &sparse_rate_, sizeof(sparse_rate_)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/io/bin.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 20224,
                        "charLength": 50
                      },
                      "insertedContent": {
                        "text": "memcpy_s(buffer, <size of buffer>,  &sparse_rate_,  sizeof(sparse_rate_)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-ceba33fd-1411-4eeb-8722-67c23678a7af",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/io/bin.cpp"
                },
                "region": {
                  "startLine": 513,
                  "startColumn": 9,
                  "endLine": 513,
                  "endColumn": 57,
                  "charOffset": 20097,
                  "charLength": 48,
                  "snippet": {
                    "text": "memcpy(buffer, &is_trivial_, sizeof(is_trivial_)",
                    "rendered": {
                      "text": "memcpy(buffer, &is_trivial_, sizeof(is_trivial_)",
                      "markdown": "`memcpy(buffer, &is_trivial_, sizeof(is_trivial_)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/io/bin.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 20097,
                        "charLength": 48
                      },
                      "insertedContent": {
                        "text": "memcpy_s(buffer, <size of buffer>,  &is_trivial_,  sizeof(is_trivial_)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-a5cfd2c5-666e-4274-8529-bf2d3db7ed36",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/io/bin.cpp"
                },
                "region": {
                  "startLine": 511,
                  "startColumn": 9,
                  "endLine": 511,
                  "endColumn": 61,
                  "charOffset": 19964,
                  "charLength": 52,
                  "snippet": {
                    "text": "memcpy(buffer, &missing_type_, sizeof(missing_type_)",
                    "rendered": {
                      "text": "memcpy(buffer, &missing_type_, sizeof(missing_type_)",
                      "markdown": "`memcpy(buffer, &missing_type_, sizeof(missing_type_)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/io/bin.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 19964,
                        "charLength": 52
                      },
                      "insertedContent": {
                        "text": "memcpy_s(buffer, <size of buffer>,  &missing_type_,  sizeof(missing_type_)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-735b2138-b7d5-47d2-8104-0c34156030c7",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/io/bin.cpp"
                },
                "region": {
                  "startLine": 509,
                  "startColumn": 9,
                  "endLine": 509,
                  "endColumn": 51,
                  "charOffset": 19846,
                  "charLength": 42,
                  "snippet": {
                    "text": "memcpy(buffer, &num_bin_, sizeof(num_bin_)",
                    "rendered": {
                      "text": "memcpy(buffer, &num_bin_, sizeof(num_bin_)",
                      "markdown": "`memcpy(buffer, &num_bin_, sizeof(num_bin_)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/io/bin.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 19846,
                        "charLength": 42
                      },
                      "insertedContent": {
                        "text": "memcpy_s(buffer, <size of buffer>,  &num_bin_,  sizeof(num_bin_)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-2d5ec8f3-c693-414f-8303-5a6873613779",
          "kind": "fail",
          "level": "error",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/network/socket_wrapper.hpp"
                },
                "region": {
                  "startLine": 67,
                  "startColumn": 2,
                  "endLine": 67,
                  "endColumn": 46,
                  "charOffset": 1362,
                  "charLength": 44,
                  "snippet": {
                    "text": "strncpy(src_copy, src, INET6_ADDRSTRLEN + 1)",
                    "rendered": {
                      "text": "strncpy(src_copy, src, INET6_ADDRSTRLEN + 1)",
                      "markdown": "`strncpy(src_copy, src, INET6_ADDRSTRLEN + 1)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "strncpy is dangerous, as if the source contains 'n' or more characters, it will not null terminate the destination."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/network/socket_wrapper.hpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1362,
                        "charLength": 44
                      },
                      "insertedContent": {
                        "text": "strcpy_s(src_copy,  INET6_ADDRSTRLEN + 1,  src)"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "strncpy is dangerous, as if the source contains 'n' or more characters, it will not null terminate the destination."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/network/socket_wrapper.hpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1362,
                        "charLength": 44
                      },
                      "insertedContent": {
                        "text": "strlcpy(src_copy,  src,  INET6_ADDRSTRLEN + 1)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "glog-44e84a08-88f7-4267-b924-95dfac129b9c",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "include/LightGBM/network.h"
                },
                "region": {
                  "startLine": 205,
                  "startColumn": 15,
                  "endLine": 205,
                  "endColumn": 42,
                  "charOffset": 7629,
                  "charLength": 27,
                  "snippet": {
                    "text": "memcpy(dst, src, type_size)",
                    "rendered": {
                      "text": "memcpy(dst, src, type_size)",
                      "markdown": "`memcpy(dst, src, type_size)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "include/LightGBM/network.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 7629,
                        "charLength": 27
                      },
                      "insertedContent": {
                        "text": "memcpy_s(dst, <size of dst>,  src,  type_size)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-774c330d-5bef-45c6-b909-fe7338595f9b",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "include/LightGBM/network.h"
                },
                "region": {
                  "startLine": 182,
                  "startColumn": 15,
                  "endLine": 182,
                  "endColumn": 42,
                  "charOffset": 6941,
                  "charLength": 27,
                  "snippet": {
                    "text": "memcpy(dst, src, type_size)",
                    "rendered": {
                      "text": "memcpy(dst, src, type_size)",
                      "markdown": "`memcpy(dst, src, type_size)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "include/LightGBM/network.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 6941,
                        "charLength": 27
                      },
                      "insertedContent": {
                        "text": "memcpy_s(dst, <size of dst>,  src,  type_size)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-4292f422-984a-4d3f-88f1-042be20c5718",
          "kind": "fail",
          "level": "error",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "include/LightGBM/utils/random.h"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 11,
                  "endLine": 32,
                  "endColumn": 18,
                  "charOffset": 694,
                  "charLength": 7,
                  "snippet": {
                    "text": "Random(",
                    "rendered": {
                      "text": "Random(",
                      "markdown": "`Random(`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.PRNG.Weak"
            ]
          }
        },
        {
          "ruleId": "glog-3991de0f-c98c-4e4e-b71b-2fd48f018969",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/io/dataset_loader.cpp"
                },
                "region": {
                  "startLine": 1483,
                  "startColumn": 30,
                  "endLine": 1483,
                  "endColumn": 64,
                  "charOffset": 65594,
                  "charLength": 34,
                  "snippet": {
                    "text": "strlen(Dataset::binary_file_token)",
                    "rendered": {
                      "text": "strlen(Dataset::binary_file_token)",
                      "markdown": "`strlen(Dataset::binary_file_token)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/io/dataset_loader.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 65594,
                        "charLength": 34
                      },
                      "insertedContent": {
                        "text": "strlen_s(Dataset::binary_file_token, <size of Dataset::binary_file_token>)"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/io/dataset_loader.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 65594,
                        "charLength": 34
                      },
                      "insertedContent": {
                        "text": "strnlen(Dataset::binary_file_token, <size of Dataset::binary_file_token>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-2bf62987-fade-43f6-8d7e-fd3e522ec9aa",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/io/dataset_loader.cpp"
                },
                "region": {
                  "startLine": 432,
                  "startColumn": 30,
                  "endLine": 432,
                  "endColumn": 64,
                  "charOffset": 18234,
                  "charLength": 34,
                  "snippet": {
                    "text": "strlen(Dataset::binary_file_token)",
                    "rendered": {
                      "text": "strlen(Dataset::binary_file_token)",
                      "markdown": "`strlen(Dataset::binary_file_token)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/io/dataset_loader.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 18234,
                        "charLength": 34
                      },
                      "insertedContent": {
                        "text": "strlen_s(Dataset::binary_file_token, <size of Dataset::binary_file_token>)"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/io/dataset_loader.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 18234,
                        "charLength": 34
                      },
                      "insertedContent": {
                        "text": "strnlen(Dataset::binary_file_token, <size of Dataset::binary_file_token>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-64fb37f1-dd6b-4c3f-8890-7fc187258121",
          "kind": "fail",
          "level": "error",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/treelearner/col_sampler.hpp"
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 16,
                  "endLine": 61,
                  "endColumn": 23,
                  "charOffset": 2137,
                  "charLength": 7,
                  "snippet": {
                    "text": "Random(",
                    "rendered": {
                      "text": "Random(",
                      "markdown": "`Random(`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.PRNG.Weak"
            ]
          }
        },
        {
          "ruleId": "glog-5715417b-f9fa-4911-8871-3b1e34036634",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/io/dataset_loader.cpp"
                },
                "region": {
                  "startLine": 362,
                  "startColumn": 36,
                  "endLine": 362,
                  "endColumn": 86,
                  "charOffset": 15212,
                  "charLength": 50,
                  "snippet": {
                    "text": "strlen(Dataset::binary_serialized_reference_token)",
                    "rendered": {
                      "text": "strlen(Dataset::binary_serialized_reference_token)",
                      "markdown": "`strlen(Dataset::binary_serialized_reference_token)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/io/dataset_loader.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 15212,
                        "charLength": 50
                      },
                      "insertedContent": {
                        "text": "strlen_s(Dataset::binary_serialized_reference_token, <size of Dataset::binary_serialized_reference_token>)"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/io/dataset_loader.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 15212,
                        "charLength": 50
                      },
                      "insertedContent": {
                        "text": "strnlen(Dataset::binary_serialized_reference_token, <size of Dataset::binary_serialized_reference_token>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-a8f916a9-2bcf-47df-af24-9bcdca5f2e3e",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/treelearner/voting_parallel_tree_learner.cpp"
                },
                "region": {
                  "startLine": 375,
                  "startColumn": 11,
                  "endLine": 375,
                  "endColumn": 108,
                  "charOffset": 17540,
                  "charLength": 97,
                  "snippet": {
                    "text": "memcpy(&larger_top_k_splits_global.back(), output_buffer_.data() + offset, sizeof(LightSplitInfo)",
                    "rendered": {
                      "text": "memcpy(&larger_top_k_splits_global.back(), output_buffer_.data() + offset, sizeof(LightSplitInfo)",
                      "markdown": "`memcpy(&larger_top_k_splits_global.back(), output_buffer_.data() + offset, sizeof(LightSplitInfo)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/treelearner/voting_parallel_tree_learner.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 17540,
                        "charLength": 97
                      },
                      "insertedContent": {
                        "text": "memcpy_s(&larger_top_k_splits_global.back(), <size of &larger_top_k_splits_global.back()>,  output_buffer_.data() + offset,  sizeof(LightSplitInfo)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-2931ea7e-d1ba-4a8c-9e85-e677277827f5",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/treelearner/voting_parallel_tree_learner.cpp"
                },
                "region": {
                  "startLine": 361,
                  "startColumn": 9,
                  "endLine": 361,
                  "endColumn": 100,
                  "charOffset": 16790,
                  "charLength": 91,
                  "snippet": {
                    "text": "memcpy(input_buffer_.data() + offset, &larger_top_k_light_splits[i], sizeof(LightSplitInfo)",
                    "rendered": {
                      "text": "memcpy(input_buffer_.data() + offset, &larger_top_k_light_splits[i], sizeof(LightSplitInfo)",
                      "markdown": "`memcpy(input_buffer_.data() + offset, &larger_top_k_light_splits[i], sizeof(LightSplitInfo)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/treelearner/voting_parallel_tree_learner.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 16790,
                        "charLength": 91
                      },
                      "insertedContent": {
                        "text": "memcpy_s(input_buffer_.data() + offset, <size of input_buffer_.data() + offset>,  &larger_top_k_light_splits[i],  sizeof(LightSplitInfo)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-6d4bf3ae-1bc5-4a6a-bf7b-bdd91da9f8ac",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/treelearner/voting_parallel_tree_learner.cpp"
                },
                "region": {
                  "startLine": 372,
                  "startColumn": 11,
                  "endLine": 372,
                  "endColumn": 109,
                  "charOffset": 17326,
                  "charLength": 98,
                  "snippet": {
                    "text": "memcpy(&smaller_top_k_splits_global.back(), output_buffer_.data() + offset, sizeof(LightSplitInfo)",
                    "rendered": {
                      "text": "memcpy(&smaller_top_k_splits_global.back(), output_buffer_.data() + offset, sizeof(LightSplitInfo)",
                      "markdown": "`memcpy(&smaller_top_k_splits_global.back(), output_buffer_.data() + offset, sizeof(LightSplitInfo)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/treelearner/voting_parallel_tree_learner.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 17326,
                        "charLength": 98
                      },
                      "insertedContent": {
                        "text": "memcpy_s(&smaller_top_k_splits_global.back(), <size of &smaller_top_k_splits_global.back()>,  output_buffer_.data() + offset,  sizeof(LightSplitInfo)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-23af4d56-188e-4116-aa08-821dad42cc24",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/treelearner/voting_parallel_tree_learner.cpp"
                },
                "region": {
                  "startLine": 359,
                  "startColumn": 9,
                  "endLine": 359,
                  "endColumn": 101,
                  "charOffset": 16648,
                  "charLength": 92,
                  "snippet": {
                    "text": "memcpy(input_buffer_.data() + offset, &smaller_top_k_light_splits[i], sizeof(LightSplitInfo)",
                    "rendered": {
                      "text": "memcpy(input_buffer_.data() + offset, &smaller_top_k_light_splits[i], sizeof(LightSplitInfo)",
                      "markdown": "`memcpy(input_buffer_.data() + offset, &smaller_top_k_light_splits[i], sizeof(LightSplitInfo)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/treelearner/voting_parallel_tree_learner.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 16648,
                        "charLength": 92
                      },
                      "insertedContent": {
                        "text": "memcpy_s(input_buffer_.data() + offset, <size of input_buffer_.data() + offset>,  &smaller_top_k_light_splits[i],  sizeof(LightSplitInfo)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-066fbfaf-857e-4324-9bdd-ce982fd976f3",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/treelearner/voting_parallel_tree_learner.cpp"
                },
                "region": {
                  "startLine": 228,
                  "startColumn": 13,
                  "endLine": 228,
                  "endColumn": 204,
                  "charOffset": 10122,
                  "charLength": 191,
                  "snippet": {
                    "text": "memcpy(input_buffer_.data() + reduce_scatter_size_, this->larger_leaf_histogram_array_[inner_feature_index].RawData(), this->larger_leaf_histogram_array_[inner_feature_index].SizeOfHistgram()",
                    "rendered": {
                      "text": "memcpy(input_buffer_.data() + reduce_scatter_size_, this->larger_leaf_histogram_array_[inner_feature_index].RawData(), this->larger_leaf_histogram_array_[inner_feature_index].SizeOfHistgram()",
                      "markdown": "`memcpy(input_buffer_.data() + reduce_scatter_size_, this->larger_leaf_histogram_array_[inner_feature_index].RawData(), this->larger_leaf_histogram_array_[inner_feature_index].SizeOfHistgram()`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/treelearner/voting_parallel_tree_learner.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 10122,
                        "charLength": 191
                      },
                      "insertedContent": {
                        "text": "memcpy_s(input_buffer_.data() + reduce_scatter_size_, <size of input_buffer_.data() + reduce_scatter_size_>,  this->larger_leaf_histogram_array_[inner_feature_index].RawData(),  this->larger_leaf_histogram_array_[inner_feature_index].SizeOfHistgram()"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-1d433144-02ef-459b-8801-8b10b0c6fd40",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/treelearner/voting_parallel_tree_learner.cpp"
                },
                "region": {
                  "startLine": 119,
                  "startColumn": 7,
                  "endLine": 119,
                  "endColumn": 74,
                  "charOffset": 5070,
                  "charLength": 67,
                  "snippet": {
                    "text": "memcpy(reinterpret_cast<void*>(&data), output_buffer_.data(), size)",
                    "rendered": {
                      "text": "memcpy(reinterpret_cast<void*>(&data), output_buffer_.data(), size)",
                      "markdown": "`memcpy(reinterpret_cast<void*>(&data), output_buffer_.data(), size)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/treelearner/voting_parallel_tree_learner.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 5070,
                        "charLength": 67
                      },
                      "insertedContent": {
                        "text": "memcpy_s(reinterpret_cast<void*>(&data), <size of reinterpret_cast<void*>(&data)>,  output_buffer_.data(),  size)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-f2538d1c-e6f2-4ce3-a9ab-adfd2c713ca2",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/treelearner/voting_parallel_tree_learner.cpp"
                },
                "region": {
                  "startLine": 210,
                  "startColumn": 13,
                  "endLine": 210,
                  "endColumn": 206,
                  "charOffset": 9123,
                  "charLength": 193,
                  "snippet": {
                    "text": "memcpy(input_buffer_.data() + reduce_scatter_size_, this->smaller_leaf_histogram_array_[inner_feature_index].RawData(), this->smaller_leaf_histogram_array_[inner_feature_index].SizeOfHistgram()",
                    "rendered": {
                      "text": "memcpy(input_buffer_.data() + reduce_scatter_size_, this->smaller_leaf_histogram_array_[inner_feature_index].RawData(), this->smaller_leaf_histogram_array_[inner_feature_index].SizeOfHistgram()",
                      "markdown": "`memcpy(input_buffer_.data() + reduce_scatter_size_, this->smaller_leaf_histogram_array_[inner_feature_index].RawData(), this->smaller_leaf_histogram_array_[inner_feature_index].SizeOfHistgram()`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/treelearner/voting_parallel_tree_learner.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 9123,
                        "charLength": 193
                      },
                      "insertedContent": {
                        "text": "memcpy_s(input_buffer_.data() + reduce_scatter_size_, <size of input_buffer_.data() + reduce_scatter_size_>,  this->smaller_leaf_histogram_array_[inner_feature_index].RawData(),  this->smaller_leaf_histogram_array_[inner_feature_index].SizeOfHistgram()"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-3a455dda-d709-4e0f-bd6c-f6989b314066",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/treelearner/voting_parallel_tree_learner.cpp"
                },
                "region": {
                  "startLine": 101,
                  "startColumn": 7,
                  "endLine": 101,
                  "endColumn": 48,
                  "charOffset": 4231,
                  "charLength": 41,
                  "snippet": {
                    "text": "memcpy(input_buffer_.data(), &data, size)",
                    "rendered": {
                      "text": "memcpy(input_buffer_.data(), &data, size)",
                      "markdown": "`memcpy(input_buffer_.data(), &data, size)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/treelearner/voting_parallel_tree_learner.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 4231,
                        "charLength": 41
                      },
                      "insertedContent": {
                        "text": "memcpy_s(input_buffer_.data(), <size of input_buffer_.data()>,  &data,  size)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-d4cd1bca-a193-4fcc-8db0-78806539d19b",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/network/network.cpp"
                },
                "region": {
                  "startLine": 317,
                  "startColumn": 7,
                  "endLine": 317,
                  "endColumn": 67,
                  "charOffset": 13587,
                  "charLength": 60,
                  "snippet": {
                    "text": "memcpy(output, input + block_start[rank_], block_len[rank_])",
                    "rendered": {
                      "text": "memcpy(output, input + block_start[rank_], block_len[rank_])",
                      "markdown": "`memcpy(output, input + block_start[rank_], block_len[rank_])`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/network/network.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 13587,
                        "charLength": 60
                      },
                      "insertedContent": {
                        "text": "memcpy_s(output, <size of output>,  input + block_start[rank_],  block_len[rank_])"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-405be20b-792b-4f2b-8786-5eab1896eb74",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/network/network.cpp"
                },
                "region": {
                  "startLine": 300,
                  "startColumn": 7,
                  "endLine": 300,
                  "endColumn": 67,
                  "charOffset": 12637,
                  "charLength": 60,
                  "snippet": {
                    "text": "memcpy(output, input + block_start[rank_], block_len[rank_])",
                    "rendered": {
                      "text": "memcpy(output, input + block_start[rank_], block_len[rank_])",
                      "markdown": "`memcpy(output, input + block_start[rank_], block_len[rank_])`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/network/network.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 12637,
                        "charLength": 60
                      },
                      "insertedContent": {
                        "text": "memcpy_s(output, <size of output>,  input + block_start[rank_],  block_len[rank_])"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-7ffbb7b3-6a62-4d3b-9e1a-7084dd56c450",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/network/network.cpp"
                },
                "region": {
                  "startLine": 218,
                  "startColumn": 7,
                  "endLine": 218,
                  "endColumn": 67,
                  "charOffset": 8552,
                  "charLength": 60,
                  "snippet": {
                    "text": "memcpy(output + block_start[rank_], input, block_len[rank_])",
                    "rendered": {
                      "text": "memcpy(output + block_start[rank_], input, block_len[rank_])",
                      "markdown": "`memcpy(output + block_start[rank_], input, block_len[rank_])`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/network/network.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 8552,
                        "charLength": 60
                      },
                      "insertedContent": {
                        "text": "memcpy_s(output + block_start[rank_], <size of output + block_start[rank_]>,  input,  block_len[rank_])"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-da951876-e721-4b43-a519-5495eaf19662",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/network/network.cpp"
                },
                "region": {
                  "startLine": 190,
                  "startColumn": 7,
                  "endLine": 190,
                  "endColumn": 67,
                  "charOffset": 7466,
                  "charLength": 60,
                  "snippet": {
                    "text": "memcpy(output + block_start[rank_], input, block_len[rank_])",
                    "rendered": {
                      "text": "memcpy(output + block_start[rank_], input, block_len[rank_])",
                      "markdown": "`memcpy(output + block_start[rank_], input, block_len[rank_])`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/network/network.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 7466,
                        "charLength": 60
                      },
                      "insertedContent": {
                        "text": "memcpy_s(output + block_start[rank_], <size of output + block_start[rank_]>,  input,  block_len[rank_])"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-2bda6ead-c8f4-465f-8d42-9ab80a434053",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/network/network.cpp"
                },
                "region": {
                  "startLine": 159,
                  "startColumn": 7,
                  "endLine": 159,
                  "endColumn": 46,
                  "charOffset": 6153,
                  "charLength": 39,
                  "snippet": {
                    "text": "memcpy(output, input, block_len[rank_])",
                    "rendered": {
                      "text": "memcpy(output, input, block_len[rank_])",
                      "markdown": "`memcpy(output, input, block_len[rank_])`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/network/network.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 6153,
                        "charLength": 39
                      },
                      "insertedContent": {
                        "text": "memcpy_s(output, <size of output>,  input,  block_len[rank_])"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-af9baf3e-7e55-4fa3-9f3d-56a23891e2b2",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/network/network.cpp"
                },
                "region": {
                  "startLine": 118,
                  "startColumn": 7,
                  "endLine": 118,
                  "endColumn": 49,
                  "charOffset": 4471,
                  "charLength": 42,
                  "snippet": {
                    "text": "memcpy(output, buffer_.data(), input_size)",
                    "rendered": {
                      "text": "memcpy(output, buffer_.data(), input_size)",
                      "markdown": "`memcpy(output, buffer_.data(), input_size)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/network/network.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 4471,
                        "charLength": 42
                      },
                      "insertedContent": {
                        "text": "memcpy_s(output, <size of output>,  buffer_.data(),  input_size)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-a1eda627-7976-4c87-960e-23df948b4d3d",
          "kind": "fail",
          "level": "error",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/io/config.cpp"
                },
                "region": {
                  "startLine": 245,
                  "startColumn": 11,
                  "endLine": 245,
                  "endColumn": 16,
                  "charOffset": 9649,
                  "charLength": 5,
                  "snippet": {
                    "text": "rand(",
                    "rendered": {
                      "text": "rand(",
                      "markdown": "`rand(`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.PRNG.Weak"
            ]
          }
        },
        {
          "ruleId": "glog-b9d5c3b8-30e0-4abf-8497-5bb310c826ce",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/io/dataset.cpp"
                },
                "region": {
                  "startLine": 1064,
                  "startColumn": 30,
                  "endLine": 1064,
                  "endColumn": 71,
                  "charOffset": 40576,
                  "charLength": 41,
                  "snippet": {
                    "text": "strlen(binary_serialized_reference_token)",
                    "rendered": {
                      "text": "strlen(binary_serialized_reference_token)",
                      "markdown": "`strlen(binary_serialized_reference_token)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/io/dataset.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 40576,
                        "charLength": 41
                      },
                      "insertedContent": {
                        "text": "strlen_s(binary_serialized_reference_token, <size of binary_serialized_reference_token>)"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/io/dataset.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 40576,
                        "charLength": 41
                      },
                      "insertedContent": {
                        "text": "strnlen(binary_serialized_reference_token, <size of binary_serialized_reference_token>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-9df5647c-a286-436b-9579-56c2ca73a676",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/io/dataset.cpp"
                },
                "region": {
                  "startLine": 1025,
                  "startColumn": 32,
                  "endLine": 1025,
                  "endColumn": 57,
                  "charOffset": 39283,
                  "charLength": 25,
                  "snippet": {
                    "text": "strlen(binary_file_token)",
                    "rendered": {
                      "text": "strlen(binary_file_token)",
                      "markdown": "`strlen(binary_file_token)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/io/dataset.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 39283,
                        "charLength": 25
                      },
                      "insertedContent": {
                        "text": "strlen_s(binary_file_token, <size of binary_file_token>)"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/io/dataset.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 39283,
                        "charLength": 25
                      },
                      "insertedContent": {
                        "text": "strnlen(binary_file_token, <size of binary_file_token>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-fb1c1daa-32a8-4a49-b46a-b0350950cb01",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/treelearner/data_parallel_tree_learner.cpp"
                },
                "region": {
                  "startLine": 275,
                  "startColumn": 11,
                  "endLine": 277,
                  "endColumn": 83,
                  "charOffset": 12883,
                  "charLength": 231,
                  "snippet": {
                    "text": "memcpy(input_buffer_.data() + buffer_write_start_pos_[feature_index],\n                this->smaller_leaf_histogram_array_[feature_index].RawData(),\n                this->smaller_leaf_histogram_array_[feature_index].SizeOfHistgram()",
                    "rendered": {
                      "text": "memcpy(input_buffer_.data() + buffer_write_start_pos_[feature_index],\n                this->smaller_leaf_histogram_array_[feature_index].RawData(),\n                this->smaller_leaf_histogram_array_[feature_index].SizeOfHistgram()",
                      "markdown": "`memcpy(input_buffer_.data() + buffer_write_start_pos_[feature_index],\n                this->smaller_leaf_histogram_array_[feature_index].RawData(),\n                this->smaller_leaf_histogram_array_[feature_index].SizeOfHistgram()`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/treelearner/data_parallel_tree_learner.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 12883,
                        "charLength": 231
                      },
                      "insertedContent": {
                        "text": "memcpy_s(input_buffer_.data() + buffer_write_start_pos_[feature_index], <size of input_buffer_.data() + buffer_write_start_pos_[feature_index]>, \n                this->smaller_leaf_histogram_array_[feature_index].RawData(), \n                this->smaller_leaf_histogram_array_[feature_index].SizeOfHistgram()"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-5727645a-a7e6-45a0-8510-21fbe5d8a8ed",
          "kind": "fail",
          "level": "error",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/io/dataset.cpp"
                },
                "region": {
                  "startLine": 119,
                  "startColumn": 9,
                  "endLine": 119,
                  "endColumn": 14,
                  "charOffset": 3496,
                  "charLength": 5,
                  "snippet": {
                    "text": "rand(",
                    "rendered": {
                      "text": "rand(",
                      "markdown": "`rand(`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.PRNG.Weak"
            ]
          }
        },
        {
          "ruleId": "glog-ac12076b-f432-4b07-a803-f4c20d3b4c1a",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/treelearner/data_parallel_tree_learner.cpp"
                },
                "region": {
                  "startLine": 266,
                  "startColumn": 15,
                  "endLine": 268,
                  "endColumn": 94,
                  "charOffset": 12409,
                  "charLength": 253,
                  "snippet": {
                    "text": "memcpy(input_buffer_.data() + buffer_write_start_pos_[feature_index],\n                      this->smaller_leaf_histogram_array_[feature_index].RawDataInt32(),\n                      this->smaller_leaf_histogram_array_[feature_index].SizeOfInt32Histgram()",
                    "rendered": {
                      "text": "memcpy(input_buffer_.data() + buffer_write_start_pos_[feature_index],\n                      this->smaller_leaf_histogram_array_[feature_index].RawDataInt32(),\n                      this->smaller_leaf_histogram_array_[feature_index].SizeOfInt32Histgram()",
                      "markdown": "`memcpy(input_buffer_.data() + buffer_write_start_pos_[feature_index],\n                      this->smaller_leaf_histogram_array_[feature_index].RawDataInt32(),\n                      this->smaller_leaf_histogram_array_[feature_index].SizeOfInt32Histgram()`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/treelearner/data_parallel_tree_learner.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 12409,
                        "charLength": 253
                      },
                      "insertedContent": {
                        "text": "memcpy_s(input_buffer_.data() + buffer_write_start_pos_[feature_index], <size of input_buffer_.data() + buffer_write_start_pos_[feature_index]>, \n                      this->smaller_leaf_histogram_array_[feature_index].RawDataInt32(), \n                      this->smaller_leaf_histogram_array_[feature_index].SizeOfInt32Histgram()"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-9d07d507-ef5e-4bb7-9592-42a7735bc941",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/treelearner/data_parallel_tree_learner.cpp"
                },
                "region": {
                  "startLine": 261,
                  "startColumn": 13,
                  "endLine": 263,
                  "endColumn": 92,
                  "charOffset": 12072,
                  "charLength": 255,
                  "snippet": {
                    "text": "memcpy(input_buffer_.data() + buffer_write_start_pos_int16_[feature_index],\n                    this->smaller_leaf_histogram_array_[feature_index].RawDataInt16(),\n                    this->smaller_leaf_histogram_array_[feature_index].SizeOfInt16Histgram()",
                    "rendered": {
                      "text": "memcpy(input_buffer_.data() + buffer_write_start_pos_int16_[feature_index],\n                    this->smaller_leaf_histogram_array_[feature_index].RawDataInt16(),\n                    this->smaller_leaf_histogram_array_[feature_index].SizeOfInt16Histgram()",
                      "markdown": "`memcpy(input_buffer_.data() + buffer_write_start_pos_int16_[feature_index],\n                    this->smaller_leaf_histogram_array_[feature_index].RawDataInt16(),\n                    this->smaller_leaf_histogram_array_[feature_index].SizeOfInt16Histgram()`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/treelearner/data_parallel_tree_learner.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 12072,
                        "charLength": 255
                      },
                      "insertedContent": {
                        "text": "memcpy_s(input_buffer_.data() + buffer_write_start_pos_int16_[feature_index], <size of input_buffer_.data() + buffer_write_start_pos_int16_[feature_index]>, \n                    this->smaller_leaf_histogram_array_[feature_index].RawDataInt16(), \n                    this->smaller_leaf_histogram_array_[feature_index].SizeOfInt16Histgram()"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-6f043ec0-e41f-43de-baa8-e514f8b91c49",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/treelearner/data_parallel_tree_learner.cpp"
                },
                "region": {
                  "startLine": 214,
                  "startColumn": 9,
                  "endLine": 214,
                  "endColumn": 76,
                  "charOffset": 9220,
                  "charLength": 67,
                  "snippet": {
                    "text": "memcpy(reinterpret_cast<void*>(&data), output_buffer_.data(), size)",
                    "rendered": {
                      "text": "memcpy(reinterpret_cast<void*>(&data), output_buffer_.data(), size)",
                      "markdown": "`memcpy(reinterpret_cast<void*>(&data), output_buffer_.data(), size)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/treelearner/data_parallel_tree_learner.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 9220,
                        "charLength": 67
                      },
                      "insertedContent": {
                        "text": "memcpy_s(reinterpret_cast<void*>(&data), <size of reinterpret_cast<void*>(&data)>,  output_buffer_.data(),  size)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-60966313-8407-44ff-9e66-bd40b0d58a17",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/treelearner/data_parallel_tree_learner.cpp"
                },
                "region": {
                  "startLine": 196,
                  "startColumn": 9,
                  "endLine": 196,
                  "endColumn": 50,
                  "charOffset": 8307,
                  "charLength": 41,
                  "snippet": {
                    "text": "memcpy(input_buffer_.data(), &data, size)",
                    "rendered": {
                      "text": "memcpy(input_buffer_.data(), &data, size)",
                      "markdown": "`memcpy(input_buffer_.data(), &data, size)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/treelearner/data_parallel_tree_learner.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 8307,
                        "charLength": 41
                      },
                      "insertedContent": {
                        "text": "memcpy_s(input_buffer_.data(), <size of input_buffer_.data()>,  &data,  size)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-ac5fb547-7e7c-4465-b996-dbb56509fa42",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/treelearner/data_parallel_tree_learner.cpp"
                },
                "region": {
                  "startLine": 184,
                  "startColumn": 9,
                  "endLine": 184,
                  "endColumn": 76,
                  "charOffset": 7533,
                  "charLength": 67,
                  "snippet": {
                    "text": "memcpy(reinterpret_cast<void*>(&data), output_buffer_.data(), size)",
                    "rendered": {
                      "text": "memcpy(reinterpret_cast<void*>(&data), output_buffer_.data(), size)",
                      "markdown": "`memcpy(reinterpret_cast<void*>(&data), output_buffer_.data(), size)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/treelearner/data_parallel_tree_learner.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 7533,
                        "charLength": 67
                      },
                      "insertedContent": {
                        "text": "memcpy_s(reinterpret_cast<void*>(&data), <size of reinterpret_cast<void*>(&data)>,  output_buffer_.data(),  size)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-10c5dfe1-4152-467b-9df6-0d7f7a69aea2",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/treelearner/data_parallel_tree_learner.cpp"
                },
                "region": {
                  "startLine": 165,
                  "startColumn": 9,
                  "endLine": 165,
                  "endColumn": 50,
                  "charOffset": 6511,
                  "charLength": 41,
                  "snippet": {
                    "text": "memcpy(input_buffer_.data(), &data, size)",
                    "rendered": {
                      "text": "memcpy(input_buffer_.data(), &data, size)",
                      "markdown": "`memcpy(input_buffer_.data(), &data, size)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/treelearner/data_parallel_tree_learner.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 6511,
                        "charLength": 41
                      },
                      "insertedContent": {
                        "text": "memcpy_s(input_buffer_.data(), <size of input_buffer_.data()>,  &data,  size)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-d41cbc4b-6c5e-4d52-8131-77717f38db0c",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/boosting/gbdt_model_text.cpp"
                },
                "region": {
                  "startLine": 442,
                  "startColumn": 53,
                  "endLine": 442,
                  "endColumn": 84,
                  "charOffset": 17636,
                  "charLength": 31,
                  "snippet": {
                    "text": "strlen(\"monotone_constraints=\")",
                    "rendered": {
                      "text": "strlen(\"monotone_constraints=\")",
                      "markdown": "`strlen(\"monotone_constraints=\")`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/boosting/gbdt_model_text.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 17636,
                        "charLength": 31
                      },
                      "insertedContent": {
                        "text": "strlen_s(\"monotone_constraints=\", <size of \"monotone_constraints=\">)"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/boosting/gbdt_model_text.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 17636,
                        "charLength": 31
                      },
                      "insertedContent": {
                        "text": "strnlen(\"monotone_constraints=\", <size of \"monotone_constraints=\">)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-7ae41878-ae7c-42c1-97c1-08efa0577b28",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/boosting/gbdt_model_text.cpp"
                },
                "region": {
                  "startLine": 440,
                  "startColumn": 53,
                  "endLine": 440,
                  "endColumn": 77,
                  "charOffset": 17498,
                  "charLength": 24,
                  "snippet": {
                    "text": "strlen(\"feature_names=\")",
                    "rendered": {
                      "text": "strlen(\"feature_names=\")",
                      "markdown": "`strlen(\"feature_names=\")`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/boosting/gbdt_model_text.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 17498,
                        "charLength": 24
                      },
                      "insertedContent": {
                        "text": "strlen_s(\"feature_names=\", <size of \"feature_names=\">)"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/boosting/gbdt_model_text.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 17498,
                        "charLength": 24
                      },
                      "insertedContent": {
                        "text": "strnlen(\"feature_names=\", <size of \"feature_names=\">)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-eaabec14-cd78-477b-9908-aa06384a6815",
          "kind": "fail",
          "level": "error",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/boosting/dart.hpp"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 23,
                  "endLine": 51,
                  "endColumn": 30,
                  "charOffset": 1393,
                  "charLength": 7,
                  "snippet": {
                    "text": "Random(",
                    "rendered": {
                      "text": "Random(",
                      "markdown": "`Random(`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.PRNG.Weak"
            ]
          }
        },
        {
          "ruleId": "glog-a4a60cf7-a8e0-43b6-aa91-5fdd82481ff3",
          "kind": "fail",
          "level": "error",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/boosting/dart.hpp"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 23,
                  "endLine": 45,
                  "endColumn": 30,
                  "charOffset": 1230,
                  "charLength": 7,
                  "snippet": {
                    "text": "Random(",
                    "rendered": {
                      "text": "Random(",
                      "markdown": "`Random(`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.PRNG.Weak"
            ]
          }
        },
        {
          "ruleId": "glog-0869e08f-6f00-40e2-85fb-cd0e4e58e62d",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/io/file_io.cpp"
                },
                "region": {
                  "startLine": 62,
                  "startColumn": 52,
                  "endLine": 62,
                  "endColumn": 70,
                  "charOffset": 1344,
                  "charLength": 18,
                  "snippet": {
                    "text": "strlen(kHdfsProto)",
                    "rendered": {
                      "text": "strlen(kHdfsProto)",
                      "markdown": "`strlen(kHdfsProto)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/io/file_io.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1344,
                        "charLength": 18
                      },
                      "insertedContent": {
                        "text": "strlen_s(kHdfsProto, <size of kHdfsProto>)"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/io/file_io.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1344,
                        "charLength": 18
                      },
                      "insertedContent": {
                        "text": "strnlen(kHdfsProto, <size of kHdfsProto>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-ccc497d1-87f6-413c-a874-e61f14673509",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/treelearner/split_info.hpp"
                },
                "region": {
                  "startLine": 229,
                  "startColumn": 9,
                  "endLine": 229,
                  "endColumn": 43,
                  "charOffset": 8247,
                  "charLength": 34,
                  "snippet": {
                    "text": "memcpy(&gain, buffer, sizeof(gain)",
                    "rendered": {
                      "text": "memcpy(&gain, buffer, sizeof(gain)",
                      "markdown": "`memcpy(&gain, buffer, sizeof(gain)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/treelearner/split_info.hpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 8247,
                        "charLength": 34
                      },
                      "insertedContent": {
                        "text": "memcpy_s(&gain, <size of &gain>,  buffer,  sizeof(gain)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-fb1bd60f-1edd-4a75-b4b8-4313d1c028a1",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/treelearner/split_info.hpp"
                },
                "region": {
                  "startLine": 227,
                  "startColumn": 9,
                  "endLine": 227,
                  "endColumn": 57,
                  "charOffset": 8152,
                  "charLength": 48,
                  "snippet": {
                    "text": "memcpy(&right_count, buffer, sizeof(right_count)",
                    "rendered": {
                      "text": "memcpy(&right_count, buffer, sizeof(right_count)",
                      "markdown": "`memcpy(&right_count, buffer, sizeof(right_count)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/treelearner/split_info.hpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 8152,
                        "charLength": 48
                      },
                      "insertedContent": {
                        "text": "memcpy_s(&right_count, <size of &right_count>,  buffer,  sizeof(right_count)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-fcff855a-35f9-438a-a0ed-82766638de2c",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/treelearner/split_info.hpp"
                },
                "region": {
                  "startLine": 225,
                  "startColumn": 9,
                  "endLine": 225,
                  "endColumn": 55,
                  "charOffset": 8060,
                  "charLength": 46,
                  "snippet": {
                    "text": "memcpy(&left_count, buffer, sizeof(left_count)",
                    "rendered": {
                      "text": "memcpy(&left_count, buffer, sizeof(left_count)",
                      "markdown": "`memcpy(&left_count, buffer, sizeof(left_count)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/treelearner/split_info.hpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 8060,
                        "charLength": 46
                      },
                      "insertedContent": {
                        "text": "memcpy_s(&left_count, <size of &left_count>,  buffer,  sizeof(left_count)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-1ccdc8a5-4e59-4527-815f-501776577578",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/treelearner/split_info.hpp"
                },
                "region": {
                  "startLine": 223,
                  "startColumn": 9,
                  "endLine": 223,
                  "endColumn": 49,
                  "charOffset": 7977,
                  "charLength": 40,
                  "snippet": {
                    "text": "memcpy(&feature, buffer, sizeof(feature)",
                    "rendered": {
                      "text": "memcpy(&feature, buffer, sizeof(feature)",
                      "markdown": "`memcpy(&feature, buffer, sizeof(feature)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/treelearner/split_info.hpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 7977,
                        "charLength": 40
                      },
                      "insertedContent": {
                        "text": "memcpy_s(&feature, <size of &feature>,  buffer,  sizeof(feature)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-9c3961bd-e636-4bc6-b147-52be6e91d09f",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/treelearner/split_info.hpp"
                },
                "region": {
                  "startLine": 129,
                  "startColumn": 9,
                  "endLine": 129,
                  "endColumn": 62,
                  "charOffset": 5521,
                  "charLength": 53,
                  "snippet": {
                    "text": "memcpy(cat_threshold.data(), buffer, sizeof(uint32_t)",
                    "rendered": {
                      "text": "memcpy(cat_threshold.data(), buffer, sizeof(uint32_t)",
                      "markdown": "`memcpy(cat_threshold.data(), buffer, sizeof(uint32_t)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/treelearner/split_info.hpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 5521,
                        "charLength": 53
                      },
                      "insertedContent": {
                        "text": "memcpy_s(cat_threshold.data(), <size of cat_threshold.data()>,  buffer,  sizeof(uint32_t)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-6d31f8bc-aad4-4674-a19a-f187f0e5ccb9",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/treelearner/split_info.hpp"
                },
                "region": {
                  "startLine": 126,
                  "startColumn": 9,
                  "endLine": 126,
                  "endColumn": 69,
                  "charOffset": 5363,
                  "charLength": 60,
                  "snippet": {
                    "text": "memcpy(&num_cat_threshold, buffer, sizeof(num_cat_threshold)",
                    "rendered": {
                      "text": "memcpy(&num_cat_threshold, buffer, sizeof(num_cat_threshold)",
                      "markdown": "`memcpy(&num_cat_threshold, buffer, sizeof(num_cat_threshold)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/treelearner/split_info.hpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 5363,
                        "charLength": 60
                      },
                      "insertedContent": {
                        "text": "memcpy_s(&num_cat_threshold, <size of &num_cat_threshold>,  buffer,  sizeof(num_cat_threshold)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-26e82d45-110a-44e6-bfce-0433da2ed906",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/treelearner/split_info.hpp"
                },
                "region": {
                  "startLine": 124,
                  "startColumn": 9,
                  "endLine": 124,
                  "endColumn": 61,
                  "charOffset": 5262,
                  "charLength": 52,
                  "snippet": {
                    "text": "memcpy(&monotone_type, buffer, sizeof(monotone_type)",
                    "rendered": {
                      "text": "memcpy(&monotone_type, buffer, sizeof(monotone_type)",
                      "markdown": "`memcpy(&monotone_type, buffer, sizeof(monotone_type)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/treelearner/split_info.hpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 5262,
                        "charLength": 52
                      },
                      "insertedContent": {
                        "text": "memcpy_s(&monotone_type, <size of &monotone_type>,  buffer,  sizeof(monotone_type)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-608a93c5-3073-49c1-ba78-3e4664caa2c4",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/treelearner/split_info.hpp"
                },
                "region": {
                  "startLine": 122,
                  "startColumn": 9,
                  "endLine": 122,
                  "endColumn": 59,
                  "charOffset": 5164,
                  "charLength": 50,
                  "snippet": {
                    "text": "memcpy(&default_left, buffer, sizeof(default_left)",
                    "rendered": {
                      "text": "memcpy(&default_left, buffer, sizeof(default_left)",
                      "markdown": "`memcpy(&default_left, buffer, sizeof(default_left)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/treelearner/split_info.hpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 5164,
                        "charLength": 50
                      },
                      "insertedContent": {
                        "text": "memcpy_s(&default_left, <size of &default_left>,  buffer,  sizeof(default_left)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-c8462633-50fe-4425-bb5c-f6ba032ec8b1",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/treelearner/split_info.hpp"
                },
                "region": {
                  "startLine": 120,
                  "startColumn": 9,
                  "endLine": 120,
                  "endColumn": 95,
                  "charOffset": 5012,
                  "charLength": 86,
                  "snippet": {
                    "text": "memcpy(&right_sum_gradient_and_hessian, buffer, sizeof(right_sum_gradient_and_hessian)",
                    "rendered": {
                      "text": "memcpy(&right_sum_gradient_and_hessian, buffer, sizeof(right_sum_gradient_and_hessian)",
                      "markdown": "`memcpy(&right_sum_gradient_and_hessian, buffer, sizeof(right_sum_gradient_and_hessian)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/treelearner/split_info.hpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 5012,
                        "charLength": 86
                      },
                      "insertedContent": {
                        "text": "memcpy_s(&right_sum_gradient_and_hessian, <size of &right_sum_gradient_and_hessian>,  buffer,  sizeof(right_sum_gradient_and_hessian)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-bce8d60e-9738-4545-a631-967dfbefb34b",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/treelearner/split_info.hpp"
                },
                "region": {
                  "startLine": 118,
                  "startColumn": 9,
                  "endLine": 118,
                  "endColumn": 69,
                  "charOffset": 4899,
                  "charLength": 60,
                  "snippet": {
                    "text": "memcpy(&right_sum_hessian, buffer, sizeof(right_sum_hessian)",
                    "rendered": {
                      "text": "memcpy(&right_sum_hessian, buffer, sizeof(right_sum_hessian)",
                      "markdown": "`memcpy(&right_sum_hessian, buffer, sizeof(right_sum_hessian)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/treelearner/split_info.hpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 4899,
                        "charLength": 60
                      },
                      "insertedContent": {
                        "text": "memcpy_s(&right_sum_hessian, <size of &right_sum_hessian>,  buffer,  sizeof(right_sum_hessian)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-949e75d9-5f68-4948-850e-f920f2076eae",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/treelearner/split_info.hpp"
                },
                "region": {
                  "startLine": 114,
                  "startColumn": 9,
                  "endLine": 114,
                  "endColumn": 93,
                  "charOffset": 4634,
                  "charLength": 84,
                  "snippet": {
                    "text": "memcpy(&left_sum_gradient_and_hessian, buffer, sizeof(left_sum_gradient_and_hessian)",
                    "rendered": {
                      "text": "memcpy(&left_sum_gradient_and_hessian, buffer, sizeof(left_sum_gradient_and_hessian)",
                      "markdown": "`memcpy(&left_sum_gradient_and_hessian, buffer, sizeof(left_sum_gradient_and_hessian)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/treelearner/split_info.hpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 4634,
                        "charLength": 84
                      },
                      "insertedContent": {
                        "text": "memcpy_s(&left_sum_gradient_and_hessian, <size of &left_sum_gradient_and_hessian>,  buffer,  sizeof(left_sum_gradient_and_hessian)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-b7fec5d2-ce8a-4c17-8a8f-983c1316ecb4",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/treelearner/split_info.hpp"
                },
                "region": {
                  "startLine": 116,
                  "startColumn": 9,
                  "endLine": 116,
                  "endColumn": 71,
                  "charOffset": 4783,
                  "charLength": 62,
                  "snippet": {
                    "text": "memcpy(&right_sum_gradient, buffer, sizeof(right_sum_gradient)",
                    "rendered": {
                      "text": "memcpy(&right_sum_gradient, buffer, sizeof(right_sum_gradient)",
                      "markdown": "`memcpy(&right_sum_gradient, buffer, sizeof(right_sum_gradient)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/treelearner/split_info.hpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 4783,
                        "charLength": 62
                      },
                      "insertedContent": {
                        "text": "memcpy_s(&right_sum_gradient, <size of &right_sum_gradient>,  buffer,  sizeof(right_sum_gradient)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-7debed93-977a-4d36-8e39-39eee9797f0e",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/treelearner/split_info.hpp"
                },
                "region": {
                  "startLine": 112,
                  "startColumn": 9,
                  "endLine": 112,
                  "endColumn": 67,
                  "charOffset": 4524,
                  "charLength": 58,
                  "snippet": {
                    "text": "memcpy(&left_sum_hessian, buffer, sizeof(left_sum_hessian)",
                    "rendered": {
                      "text": "memcpy(&left_sum_hessian, buffer, sizeof(left_sum_hessian)",
                      "markdown": "`memcpy(&left_sum_hessian, buffer, sizeof(left_sum_hessian)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/treelearner/split_info.hpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 4524,
                        "charLength": 58
                      },
                      "insertedContent": {
                        "text": "memcpy_s(&left_sum_hessian, <size of &left_sum_hessian>,  buffer,  sizeof(left_sum_hessian)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-d850c16b-db7d-4883-9b11-a7b216f9dffa",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/treelearner/split_info.hpp"
                },
                "region": {
                  "startLine": 110,
                  "startColumn": 9,
                  "endLine": 110,
                  "endColumn": 69,
                  "charOffset": 4411,
                  "charLength": 60,
                  "snippet": {
                    "text": "memcpy(&left_sum_gradient, buffer, sizeof(left_sum_gradient)",
                    "rendered": {
                      "text": "memcpy(&left_sum_gradient, buffer, sizeof(left_sum_gradient)",
                      "markdown": "`memcpy(&left_sum_gradient, buffer, sizeof(left_sum_gradient)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/treelearner/split_info.hpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 4411,
                        "charLength": 60
                      },
                      "insertedContent": {
                        "text": "memcpy_s(&left_sum_gradient, <size of &left_sum_gradient>,  buffer,  sizeof(left_sum_gradient)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-e4171c6d-53e5-4d31-970a-9dbfe3dcdf18",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/treelearner/split_info.hpp"
                },
                "region": {
                  "startLine": 108,
                  "startColumn": 9,
                  "endLine": 108,
                  "endColumn": 59,
                  "charOffset": 4313,
                  "charLength": 50,
                  "snippet": {
                    "text": "memcpy(&right_output, buffer, sizeof(right_output)",
                    "rendered": {
                      "text": "memcpy(&right_output, buffer, sizeof(right_output)",
                      "markdown": "`memcpy(&right_output, buffer, sizeof(right_output)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/treelearner/split_info.hpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 4313,
                        "charLength": 50
                      },
                      "insertedContent": {
                        "text": "memcpy_s(&right_output, <size of &right_output>,  buffer,  sizeof(right_output)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-6d068876-b09d-48b0-92fa-64f3aeac178d",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/treelearner/split_info.hpp"
                },
                "region": {
                  "startLine": 106,
                  "startColumn": 9,
                  "endLine": 106,
                  "endColumn": 57,
                  "charOffset": 4218,
                  "charLength": 48,
                  "snippet": {
                    "text": "memcpy(&left_output, buffer, sizeof(left_output)",
                    "rendered": {
                      "text": "memcpy(&left_output, buffer, sizeof(left_output)",
                      "markdown": "`memcpy(&left_output, buffer, sizeof(left_output)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/treelearner/split_info.hpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 4218,
                        "charLength": 48
                      },
                      "insertedContent": {
                        "text": "memcpy_s(&left_output, <size of &left_output>,  buffer,  sizeof(left_output)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-154483aa-4404-4b9a-a282-aa66203eb7b3",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/treelearner/split_info.hpp"
                },
                "region": {
                  "startLine": 104,
                  "startColumn": 9,
                  "endLine": 104,
                  "endColumn": 53,
                  "charOffset": 4129,
                  "charLength": 44,
                  "snippet": {
                    "text": "memcpy(&threshold, buffer, sizeof(threshold)",
                    "rendered": {
                      "text": "memcpy(&threshold, buffer, sizeof(threshold)",
                      "markdown": "`memcpy(&threshold, buffer, sizeof(threshold)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/treelearner/split_info.hpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 4129,
                        "charLength": 44
                      },
                      "insertedContent": {
                        "text": "memcpy_s(&threshold, <size of &threshold>,  buffer,  sizeof(threshold)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-3b40bc7a-5e21-42b0-ae00-09182d331310",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/treelearner/split_info.hpp"
                },
                "region": {
                  "startLine": 102,
                  "startColumn": 9,
                  "endLine": 102,
                  "endColumn": 43,
                  "charOffset": 4055,
                  "charLength": 34,
                  "snippet": {
                    "text": "memcpy(&gain, buffer, sizeof(gain)",
                    "rendered": {
                      "text": "memcpy(&gain, buffer, sizeof(gain)",
                      "markdown": "`memcpy(&gain, buffer, sizeof(gain)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/treelearner/split_info.hpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 4055,
                        "charLength": 34
                      },
                      "insertedContent": {
                        "text": "memcpy_s(&gain, <size of &gain>,  buffer,  sizeof(gain)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-a0c2994c-6061-443b-a237-3a534df51434",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/treelearner/split_info.hpp"
                },
                "region": {
                  "startLine": 98,
                  "startColumn": 9,
                  "endLine": 98,
                  "endColumn": 55,
                  "charOffset": 3868,
                  "charLength": 46,
                  "snippet": {
                    "text": "memcpy(&left_count, buffer, sizeof(left_count)",
                    "rendered": {
                      "text": "memcpy(&left_count, buffer, sizeof(left_count)",
                      "markdown": "`memcpy(&left_count, buffer, sizeof(left_count)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/treelearner/split_info.hpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 3868,
                        "charLength": 46
                      },
                      "insertedContent": {
                        "text": "memcpy_s(&left_count, <size of &left_count>,  buffer,  sizeof(left_count)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-880c1592-f31a-45ff-8e9e-0d7586ee0207",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/treelearner/split_info.hpp"
                },
                "region": {
                  "startLine": 100,
                  "startColumn": 9,
                  "endLine": 100,
                  "endColumn": 57,
                  "charOffset": 3960,
                  "charLength": 48,
                  "snippet": {
                    "text": "memcpy(&right_count, buffer, sizeof(right_count)",
                    "rendered": {
                      "text": "memcpy(&right_count, buffer, sizeof(right_count)",
                      "markdown": "`memcpy(&right_count, buffer, sizeof(right_count)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/treelearner/split_info.hpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 3960,
                        "charLength": 48
                      },
                      "insertedContent": {
                        "text": "memcpy_s(&right_count, <size of &right_count>,  buffer,  sizeof(right_count)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-6702284b-637f-4f0f-85e7-83b99c8a0ea7",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/treelearner/split_info.hpp"
                },
                "region": {
                  "startLine": 96,
                  "startColumn": 9,
                  "endLine": 96,
                  "endColumn": 49,
                  "charOffset": 3785,
                  "charLength": 40,
                  "snippet": {
                    "text": "memcpy(&feature, buffer, sizeof(feature)",
                    "rendered": {
                      "text": "memcpy(&feature, buffer, sizeof(feature)",
                      "markdown": "`memcpy(&feature, buffer, sizeof(feature)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/treelearner/split_info.hpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 3785,
                        "charLength": 40
                      },
                      "insertedContent": {
                        "text": "memcpy_s(&feature, <size of &feature>,  buffer,  sizeof(feature)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-33887fc5-3712-4377-8daa-2ead198bad78",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/treelearner/split_info.hpp"
                },
                "region": {
                  "startLine": 92,
                  "startColumn": 9,
                  "endLine": 92,
                  "endColumn": 62,
                  "charOffset": 3657,
                  "charLength": 53,
                  "snippet": {
                    "text": "memcpy(buffer, cat_threshold.data(), sizeof(uint32_t)",
                    "rendered": {
                      "text": "memcpy(buffer, cat_threshold.data(), sizeof(uint32_t)",
                      "markdown": "`memcpy(buffer, cat_threshold.data(), sizeof(uint32_t)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/treelearner/split_info.hpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 3657,
                        "charLength": 53
                      },
                      "insertedContent": {
                        "text": "memcpy_s(buffer, <size of buffer>,  cat_threshold.data(),  sizeof(uint32_t)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-cab48782-6f23-48b2-b0d3-33804a0d5aff",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/treelearner/split_info.hpp"
                },
                "region": {
                  "startLine": 90,
                  "startColumn": 9,
                  "endLine": 90,
                  "endColumn": 69,
                  "charOffset": 3544,
                  "charLength": 60,
                  "snippet": {
                    "text": "memcpy(buffer, &num_cat_threshold, sizeof(num_cat_threshold)",
                    "rendered": {
                      "text": "memcpy(buffer, &num_cat_threshold, sizeof(num_cat_threshold)",
                      "markdown": "`memcpy(buffer, &num_cat_threshold, sizeof(num_cat_threshold)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/treelearner/split_info.hpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 3544,
                        "charLength": 60
                      },
                      "insertedContent": {
                        "text": "memcpy_s(buffer, <size of buffer>,  &num_cat_threshold,  sizeof(num_cat_threshold)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-fe3a863e-11ee-4d5c-a36e-2a731426ce21",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/treelearner/split_info.hpp"
                },
                "region": {
                  "startLine": 88,
                  "startColumn": 9,
                  "endLine": 88,
                  "endColumn": 61,
                  "charOffset": 3443,
                  "charLength": 52,
                  "snippet": {
                    "text": "memcpy(buffer, &monotone_type, sizeof(monotone_type)",
                    "rendered": {
                      "text": "memcpy(buffer, &monotone_type, sizeof(monotone_type)",
                      "markdown": "`memcpy(buffer, &monotone_type, sizeof(monotone_type)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/treelearner/split_info.hpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 3443,
                        "charLength": 52
                      },
                      "insertedContent": {
                        "text": "memcpy_s(buffer, <size of buffer>,  &monotone_type,  sizeof(monotone_type)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-978774ed-99a5-4415-b5d7-22d393897c9a",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/treelearner/split_info.hpp"
                },
                "region": {
                  "startLine": 86,
                  "startColumn": 9,
                  "endLine": 86,
                  "endColumn": 59,
                  "charOffset": 3345,
                  "charLength": 50,
                  "snippet": {
                    "text": "memcpy(buffer, &default_left, sizeof(default_left)",
                    "rendered": {
                      "text": "memcpy(buffer, &default_left, sizeof(default_left)",
                      "markdown": "`memcpy(buffer, &default_left, sizeof(default_left)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/treelearner/split_info.hpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 3345,
                        "charLength": 50
                      },
                      "insertedContent": {
                        "text": "memcpy_s(buffer, <size of buffer>,  &default_left,  sizeof(default_left)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-6560a92e-bba5-42bf-bb6c-1aa7e0b5a8f6",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/treelearner/split_info.hpp"
                },
                "region": {
                  "startLine": 84,
                  "startColumn": 9,
                  "endLine": 84,
                  "endColumn": 95,
                  "charOffset": 3193,
                  "charLength": 86,
                  "snippet": {
                    "text": "memcpy(buffer, &right_sum_gradient_and_hessian, sizeof(right_sum_gradient_and_hessian)",
                    "rendered": {
                      "text": "memcpy(buffer, &right_sum_gradient_and_hessian, sizeof(right_sum_gradient_and_hessian)",
                      "markdown": "`memcpy(buffer, &right_sum_gradient_and_hessian, sizeof(right_sum_gradient_and_hessian)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/treelearner/split_info.hpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 3193,
                        "charLength": 86
                      },
                      "insertedContent": {
                        "text": "memcpy_s(buffer, <size of buffer>,  &right_sum_gradient_and_hessian,  sizeof(right_sum_gradient_and_hessian)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-0e68d067-ace4-44a5-bed3-4f3af519da05",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/treelearner/split_info.hpp"
                },
                "region": {
                  "startLine": 82,
                  "startColumn": 9,
                  "endLine": 82,
                  "endColumn": 69,
                  "charOffset": 3080,
                  "charLength": 60,
                  "snippet": {
                    "text": "memcpy(buffer, &right_sum_hessian, sizeof(right_sum_hessian)",
                    "rendered": {
                      "text": "memcpy(buffer, &right_sum_hessian, sizeof(right_sum_hessian)",
                      "markdown": "`memcpy(buffer, &right_sum_hessian, sizeof(right_sum_hessian)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/treelearner/split_info.hpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 3080,
                        "charLength": 60
                      },
                      "insertedContent": {
                        "text": "memcpy_s(buffer, <size of buffer>,  &right_sum_hessian,  sizeof(right_sum_hessian)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-672898fe-e582-4214-915d-844a2f37d0ca",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/treelearner/split_info.hpp"
                },
                "region": {
                  "startLine": 80,
                  "startColumn": 9,
                  "endLine": 80,
                  "endColumn": 71,
                  "charOffset": 2964,
                  "charLength": 62,
                  "snippet": {
                    "text": "memcpy(buffer, &right_sum_gradient, sizeof(right_sum_gradient)",
                    "rendered": {
                      "text": "memcpy(buffer, &right_sum_gradient, sizeof(right_sum_gradient)",
                      "markdown": "`memcpy(buffer, &right_sum_gradient, sizeof(right_sum_gradient)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/treelearner/split_info.hpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2964,
                        "charLength": 62
                      },
                      "insertedContent": {
                        "text": "memcpy_s(buffer, <size of buffer>,  &right_sum_gradient,  sizeof(right_sum_gradient)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-23eff887-8d8e-404c-96db-8d07f08a2468",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/treelearner/split_info.hpp"
                },
                "region": {
                  "startLine": 78,
                  "startColumn": 9,
                  "endLine": 78,
                  "endColumn": 93,
                  "charOffset": 2815,
                  "charLength": 84,
                  "snippet": {
                    "text": "memcpy(buffer, &left_sum_gradient_and_hessian, sizeof(left_sum_gradient_and_hessian)",
                    "rendered": {
                      "text": "memcpy(buffer, &left_sum_gradient_and_hessian, sizeof(left_sum_gradient_and_hessian)",
                      "markdown": "`memcpy(buffer, &left_sum_gradient_and_hessian, sizeof(left_sum_gradient_and_hessian)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/treelearner/split_info.hpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2815,
                        "charLength": 84
                      },
                      "insertedContent": {
                        "text": "memcpy_s(buffer, <size of buffer>,  &left_sum_gradient_and_hessian,  sizeof(left_sum_gradient_and_hessian)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-a29eeb13-5521-40ee-baca-559fc74d6eca",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/treelearner/split_info.hpp"
                },
                "region": {
                  "startLine": 76,
                  "startColumn": 9,
                  "endLine": 76,
                  "endColumn": 67,
                  "charOffset": 2705,
                  "charLength": 58,
                  "snippet": {
                    "text": "memcpy(buffer, &left_sum_hessian, sizeof(left_sum_hessian)",
                    "rendered": {
                      "text": "memcpy(buffer, &left_sum_hessian, sizeof(left_sum_hessian)",
                      "markdown": "`memcpy(buffer, &left_sum_hessian, sizeof(left_sum_hessian)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/treelearner/split_info.hpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2705,
                        "charLength": 58
                      },
                      "insertedContent": {
                        "text": "memcpy_s(buffer, <size of buffer>,  &left_sum_hessian,  sizeof(left_sum_hessian)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-243d6153-3bda-47b2-a441-d72d191ab1c8",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/treelearner/split_info.hpp"
                },
                "region": {
                  "startLine": 74,
                  "startColumn": 9,
                  "endLine": 74,
                  "endColumn": 69,
                  "charOffset": 2592,
                  "charLength": 60,
                  "snippet": {
                    "text": "memcpy(buffer, &left_sum_gradient, sizeof(left_sum_gradient)",
                    "rendered": {
                      "text": "memcpy(buffer, &left_sum_gradient, sizeof(left_sum_gradient)",
                      "markdown": "`memcpy(buffer, &left_sum_gradient, sizeof(left_sum_gradient)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/treelearner/split_info.hpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2592,
                        "charLength": 60
                      },
                      "insertedContent": {
                        "text": "memcpy_s(buffer, <size of buffer>,  &left_sum_gradient,  sizeof(left_sum_gradient)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-ec86a938-9f84-4299-8815-2e0589d1cc41",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/treelearner/split_info.hpp"
                },
                "region": {
                  "startLine": 72,
                  "startColumn": 9,
                  "endLine": 72,
                  "endColumn": 59,
                  "charOffset": 2494,
                  "charLength": 50,
                  "snippet": {
                    "text": "memcpy(buffer, &right_output, sizeof(right_output)",
                    "rendered": {
                      "text": "memcpy(buffer, &right_output, sizeof(right_output)",
                      "markdown": "`memcpy(buffer, &right_output, sizeof(right_output)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/treelearner/split_info.hpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2494,
                        "charLength": 50
                      },
                      "insertedContent": {
                        "text": "memcpy_s(buffer, <size of buffer>,  &right_output,  sizeof(right_output)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-44e5a11b-3a52-4b62-8175-0b4469ee07bd",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/treelearner/split_info.hpp"
                },
                "region": {
                  "startLine": 70,
                  "startColumn": 9,
                  "endLine": 70,
                  "endColumn": 57,
                  "charOffset": 2399,
                  "charLength": 48,
                  "snippet": {
                    "text": "memcpy(buffer, &left_output, sizeof(left_output)",
                    "rendered": {
                      "text": "memcpy(buffer, &left_output, sizeof(left_output)",
                      "markdown": "`memcpy(buffer, &left_output, sizeof(left_output)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/treelearner/split_info.hpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2399,
                        "charLength": 48
                      },
                      "insertedContent": {
                        "text": "memcpy_s(buffer, <size of buffer>,  &left_output,  sizeof(left_output)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-cf5787fb-dc81-4438-9946-1c53edd620b0",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/treelearner/split_info.hpp"
                },
                "region": {
                  "startLine": 68,
                  "startColumn": 9,
                  "endLine": 68,
                  "endColumn": 53,
                  "charOffset": 2310,
                  "charLength": 44,
                  "snippet": {
                    "text": "memcpy(buffer, &threshold, sizeof(threshold)",
                    "rendered": {
                      "text": "memcpy(buffer, &threshold, sizeof(threshold)",
                      "markdown": "`memcpy(buffer, &threshold, sizeof(threshold)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/treelearner/split_info.hpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2310,
                        "charLength": 44
                      },
                      "insertedContent": {
                        "text": "memcpy_s(buffer, <size of buffer>,  &threshold,  sizeof(threshold)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-5a3797b7-ec30-4427-b5ee-9cd824f69bf8",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/treelearner/split_info.hpp"
                },
                "region": {
                  "startLine": 66,
                  "startColumn": 9,
                  "endLine": 66,
                  "endColumn": 43,
                  "charOffset": 2236,
                  "charLength": 34,
                  "snippet": {
                    "text": "memcpy(buffer, &gain, sizeof(gain)",
                    "rendered": {
                      "text": "memcpy(buffer, &gain, sizeof(gain)",
                      "markdown": "`memcpy(buffer, &gain, sizeof(gain)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/treelearner/split_info.hpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2236,
                        "charLength": 34
                      },
                      "insertedContent": {
                        "text": "memcpy_s(buffer, <size of buffer>,  &gain,  sizeof(gain)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-33496603-d019-492c-9ea2-8906c312501f",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/treelearner/split_info.hpp"
                },
                "region": {
                  "startLine": 64,
                  "startColumn": 9,
                  "endLine": 64,
                  "endColumn": 57,
                  "charOffset": 2141,
                  "charLength": 48,
                  "snippet": {
                    "text": "memcpy(buffer, &right_count, sizeof(right_count)",
                    "rendered": {
                      "text": "memcpy(buffer, &right_count, sizeof(right_count)",
                      "markdown": "`memcpy(buffer, &right_count, sizeof(right_count)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/treelearner/split_info.hpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2141,
                        "charLength": 48
                      },
                      "insertedContent": {
                        "text": "memcpy_s(buffer, <size of buffer>,  &right_count,  sizeof(right_count)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-5a50f95a-5c87-4249-a765-397f16ed53b5",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/treelearner/split_info.hpp"
                },
                "region": {
                  "startLine": 62,
                  "startColumn": 9,
                  "endLine": 62,
                  "endColumn": 55,
                  "charOffset": 2049,
                  "charLength": 46,
                  "snippet": {
                    "text": "memcpy(buffer, &left_count, sizeof(left_count)",
                    "rendered": {
                      "text": "memcpy(buffer, &left_count, sizeof(left_count)",
                      "markdown": "`memcpy(buffer, &left_count, sizeof(left_count)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/treelearner/split_info.hpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2049,
                        "charLength": 46
                      },
                      "insertedContent": {
                        "text": "memcpy_s(buffer, <size of buffer>,  &left_count,  sizeof(left_count)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-9ccacc62-f1a2-47ec-add9-827f81f376e2",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/treelearner/split_info.hpp"
                },
                "region": {
                  "startLine": 60,
                  "startColumn": 9,
                  "endLine": 60,
                  "endColumn": 49,
                  "charOffset": 1966,
                  "charLength": 40,
                  "snippet": {
                    "text": "memcpy(buffer, &feature, sizeof(feature)",
                    "rendered": {
                      "text": "memcpy(buffer, &feature, sizeof(feature)",
                      "markdown": "`memcpy(buffer, &feature, sizeof(feature)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/treelearner/split_info.hpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1966,
                        "charLength": 40
                      },
                      "insertedContent": {
                        "text": "memcpy_s(buffer, <size of buffer>,  &feature,  sizeof(feature)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-7e6cee94-6117-4150-9e3d-b81ea5ac2430",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/c_api.cpp"
                },
                "region": {
                  "startLine": 2504,
                  "startColumn": 9,
                  "endLine": 2504,
                  "endColumn": 49,
                  "charOffset": 99263,
                  "charLength": 40,
                  "snippet": {
                    "text": "memcpy(out_str, model.c_str(), *out_len)",
                    "rendered": {
                      "text": "memcpy(out_str, model.c_str(), *out_len)",
                      "markdown": "`memcpy(out_str, model.c_str(), *out_len)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/c_api.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 99263,
                        "charLength": 40
                      },
                      "insertedContent": {
                        "text": "memcpy_s(out_str, <size of out_str>,  model.c_str(),  *out_len)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-e305720a-212e-4a1a-ae1d-ace44059aa2f",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/c_api.cpp"
                },
                "region": {
                  "startLine": 2486,
                  "startColumn": 9,
                  "endLine": 2486,
                  "endColumn": 49,
                  "charOffset": 98555,
                  "charLength": 40,
                  "snippet": {
                    "text": "memcpy(out_str, model.c_str(), *out_len)",
                    "rendered": {
                      "text": "memcpy(out_str, model.c_str(), *out_len)",
                      "markdown": "`memcpy(out_str, model.c_str(), *out_len)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/c_api.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 98555,
                        "charLength": 40
                      },
                      "insertedContent": {
                        "text": "memcpy_s(out_str, <size of out_str>,  model.c_str(),  *out_len)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-f350ac21-0c6b-4f30-9b6a-4df5431fa1da",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/c_api.cpp"
                },
                "region": {
                  "startLine": 1811,
                  "startColumn": 9,
                  "endLine": 1811,
                  "endColumn": 50,
                  "charOffset": 71083,
                  "charLength": 41,
                  "snippet": {
                    "text": "memcpy(out_str, params.c_str(), *out_len)",
                    "rendered": {
                      "text": "memcpy(out_str, params.c_str(), *out_len)",
                      "markdown": "`memcpy(out_str, params.c_str(), *out_len)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/c_api.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 71083,
                        "charLength": 41
                      },
                      "insertedContent": {
                        "text": "memcpy_s(out_str, <size of out_str>,  params.c_str(),  *out_len)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-22828490-5b61-4a24-8f6b-a8d6dd6b8ea7",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/c_api.cpp"
                },
                "region": {
                  "startLine": 1624,
                  "startColumn": 11,
                  "endLine": 1624,
                  "endColumn": 106,
                  "charOffset": 64800,
                  "charLength": 95,
                  "snippet": {
                    "text": "memcpy(feature_names[i], inside_feature_name[i].c_str(), std::min(inside_feature_name[i].size()",
                    "rendered": {
                      "text": "memcpy(feature_names[i], inside_feature_name[i].c_str(), std::min(inside_feature_name[i].size()",
                      "markdown": "`memcpy(feature_names[i], inside_feature_name[i].c_str(), std::min(inside_feature_name[i].size()`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/c_api.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 64800,
                        "charLength": 95
                      },
                      "insertedContent": {
                        "text": "memcpy_s(feature_names[i], <size of feature_names[i]>,  inside_feature_name[i].c_str(),  std::min(inside_feature_name[i].size()"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-10d26d32-2213-4701-9f2e-5b217f0824c7",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/c_api.cpp"
                },
                "region": {
                  "startLine": 950,
                  "startColumn": 2,
                  "endLine": 950,
                  "endColumn": 52,
                  "charOffset": 38358,
                  "charLength": 50,
                  "snippet": {
                    "text": "memcpy(out, sample_indices.data(), sizeof(int32_t)",
                    "rendered": {
                      "text": "memcpy(out, sample_indices.data(), sizeof(int32_t)",
                      "markdown": "`memcpy(out, sample_indices.data(), sizeof(int32_t)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/c_api.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 38358,
                        "charLength": 50
                      },
                      "insertedContent": {
                        "text": "memcpy_s(out, <size of out>,  sample_indices.data(),  sizeof(int32_t)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-b4381072-df8b-4f3a-a55f-1c22612a8ec8",
          "kind": "fail",
          "level": "error",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/c_api.cpp"
                },
                "region": {
                  "startLine": 915,
                  "startColumn": 9,
                  "endLine": 915,
                  "endColumn": 14,
                  "charOffset": 37274,
                  "charLength": 5,
                  "snippet": {
                    "text": "rand(",
                    "rendered": {
                      "text": "rand(",
                      "markdown": "`rand(`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.PRNG.Weak"
            ]
          }
        },
        {
          "ruleId": "glog-1423644b-9a61-41f3-8b28-2b07d4c82207",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/c_api.cpp"
                },
                "region": {
                  "startLine": 899,
                  "startColumn": 9,
                  "endLine": 899,
                  "endColumn": 51,
                  "charOffset": 36780,
                  "charLength": 42,
                  "snippet": {
                    "text": "memcpy(out_str, aliases.c_str(), *out_len)",
                    "rendered": {
                      "text": "memcpy(out_str, aliases.c_str(), *out_len)",
                      "markdown": "`memcpy(out_str, aliases.c_str(), *out_len)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/c_api.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 36780,
                        "charLength": 42
                      },
                      "insertedContent": {
                        "text": "memcpy_s(out_str, <size of out_str>,  aliases.c_str(),  *out_len)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-803fc717-60ee-4350-b5ec-5b1c75ef8949",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/c_api.cpp"
                },
                "region": {
                  "startLine": 803,
                  "startColumn": 13,
                  "endLine": 803,
                  "endColumn": 69,
                  "charOffset": 33487,
                  "charLength": 56,
                  "snippet": {
                    "text": "memcpy(out_strs[idx], name.c_str(), std::min(name.size()",
                    "rendered": {
                      "text": "memcpy(out_strs[idx], name.c_str(), std::min(name.size()",
                      "markdown": "`memcpy(out_strs[idx], name.c_str(), std::min(name.size()`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/c_api.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 33487,
                        "charLength": 56
                      },
                      "insertedContent": {
                        "text": "memcpy_s(out_strs[idx], <size of out_strs[idx]>,  name.c_str(),  std::min(name.size()"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-bb1e57ac-b7c3-4080-b513-0471ab455bc4",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/c_api.cpp"
                },
                "region": {
                  "startLine": 787,
                  "startColumn": 15,
                  "endLine": 787,
                  "endColumn": 71,
                  "charOffset": 32963,
                  "charLength": 56,
                  "snippet": {
                    "text": "memcpy(out_strs[idx], name.c_str(), std::min(name.size()",
                    "rendered": {
                      "text": "memcpy(out_strs[idx], name.c_str(), std::min(name.size()",
                      "markdown": "`memcpy(out_strs[idx], name.c_str(), std::min(name.size()`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/c_api.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 32963,
                        "charLength": 56
                      },
                      "insertedContent": {
                        "text": "memcpy_s(out_strs[idx], <size of out_strs[idx]>,  name.c_str(),  std::min(name.size()"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-012107aa-118f-4b99-90c1-68705c306409",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/c_api.cpp"
                },
                "region": {
                  "startLine": 726,
                  "startColumn": 22,
                  "endLine": 726,
                  "endColumn": 39,
                  "charOffset": 30971,
                  "charLength": 17,
                  "snippet": {
                    "text": "strlen(model_str)",
                    "rendered": {
                      "text": "strlen(model_str)",
                      "markdown": "`strlen(model_str)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/c_api.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 30971,
                        "charLength": 17
                      },
                      "insertedContent": {
                        "text": "strlen_s(model_str, <size of model_str>)"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/c_api.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 30971,
                        "charLength": 17
                      },
                      "insertedContent": {
                        "text": "strnlen(model_str, <size of model_str>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-87634337-dcc6-47dd-8969-309e48a095de",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/treelearner/data_partition.hpp"
                },
                "region": {
                  "startLine": 62,
                  "startColumn": 11,
                  "endLine": 62,
                  "endColumn": 93,
                  "charOffset": 1759,
                  "charLength": 82,
                  "snippet": {
                    "text": "memcpy(indices_.data(), used_data_indices_, used_data_count_ * sizeof(data_size_t)",
                    "rendered": {
                      "text": "memcpy(indices_.data(), used_data_indices_, used_data_count_ * sizeof(data_size_t)",
                      "markdown": "`memcpy(indices_.data(), used_data_indices_, used_data_count_ * sizeof(data_size_t)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/treelearner/data_partition.hpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1759,
                        "charLength": 82
                      },
                      "insertedContent": {
                        "text": "memcpy_s(indices_.data(), <size of indices_.data()>,  used_data_indices_,  used_data_count_ * sizeof(data_size_t)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-b6cde4ed-8592-45a3-8f57-486ef49fad39",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/treelearner/parallel_tree_learner.h"
                },
                "region": {
                  "startLine": 222,
                  "startColumn": 13,
                  "endLine": 222,
                  "endColumn": 35,
                  "charOffset": 9144,
                  "charLength": 22,
                  "snippet": {
                    "text": "memcpy(dst, src, size)",
                    "rendered": {
                      "text": "memcpy(dst, src, size)",
                      "markdown": "`memcpy(dst, src, size)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/treelearner/parallel_tree_learner.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 9144,
                        "charLength": 22
                      },
                      "insertedContent": {
                        "text": "memcpy_s(dst, <size of dst>,  src,  size)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-1f932a16-114c-4d73-ac29-8530b7d23ff5",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "R-package/src/lightgbm_R.cpp"
                },
                "region": {
                  "startLine": 1037,
                  "startColumn": 7,
                  "endLine": 1037,
                  "endColumn": 67,
                  "charOffset": 33045,
                  "charLength": 60,
                  "snippet": {
                    "text": "memcpy(REAL(out_data_R), out_data, out_len[0]*sizeof(double)",
                    "rendered": {
                      "text": "memcpy(REAL(out_data_R), out_data, out_len[0]*sizeof(double)",
                      "markdown": "`memcpy(REAL(out_data_R), out_data, out_len[0]*sizeof(double)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "R-package/src/lightgbm_R.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 33045,
                        "charLength": 60
                      },
                      "insertedContent": {
                        "text": "memcpy_s(REAL(out_data_R), <size of REAL(out_data_R)>,  out_data,  out_len[0]*sizeof(double)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-452a667b-654c-43af-ae87-426dc2b6d62e",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "R-package/src/lightgbm_R.cpp"
                },
                "region": {
                  "startLine": 1036,
                  "startColumn": 7,
                  "endLine": 1036,
                  "endColumn": 73,
                  "charOffset": 32969,
                  "charLength": 66,
                  "snippet": {
                    "text": "memcpy(INTEGER(out_indices_R), out_indices, out_len[0]*sizeof(int)",
                    "rendered": {
                      "text": "memcpy(INTEGER(out_indices_R), out_indices, out_len[0]*sizeof(int)",
                      "markdown": "`memcpy(INTEGER(out_indices_R), out_indices, out_len[0]*sizeof(int)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "R-package/src/lightgbm_R.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 32969,
                        "charLength": 66
                      },
                      "insertedContent": {
                        "text": "memcpy_s(INTEGER(out_indices_R), <size of INTEGER(out_indices_R)>,  out_indices,  out_len[0]*sizeof(int)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-56b3f534-ff7e-44d1-892a-b5e4236dc8e1",
          "kind": "fail",
          "level": "error",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "swig/StringArray.hpp"
                },
                "region": {
                  "startLine": 80,
                  "startColumn": 17,
                  "endLine": 80,
                  "endColumn": 54,
                  "charOffset": 2419,
                  "charLength": 37,
                  "snippet": {
                    "text": "strcpy(_array[index], content.c_str()",
                    "rendered": {
                      "text": "strcpy(_array[index], content.c_str()",
                      "markdown": "`strcpy(_array[index], content.c_str()`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "strcpy is frequently dangerous, as it will cause a buffer overflow if the source is larger than the destination."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "swig/StringArray.hpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2419,
                        "charLength": 37
                      },
                      "insertedContent": {
                        "text": "strcpy_s(_array[index], <size of _array[index]>,  content.c_str()"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "strcpy is frequently dangerous, as it will cause a buffer overflow if the source is larger than the destination."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "swig/StringArray.hpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2419,
                        "charLength": 37
                      },
                      "insertedContent": {
                        "text": "strlcpy(_array[index],  content.c_str(, <size of _array[index]>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "glog-d4783a6b-a01a-42a0-9ec0-3676a1d610a0",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "R-package/src/lightgbm_R.cpp"
                },
                "region": {
                  "startLine": 1035,
                  "startColumn": 7,
                  "endLine": 1035,
                  "endColumn": 71,
                  "charOffset": 32895,
                  "charLength": 64,
                  "snippet": {
                    "text": "memcpy(INTEGER(out_indptr_R), out_indptr, out_len[1]*sizeof(int)",
                    "rendered": {
                      "text": "memcpy(INTEGER(out_indptr_R), out_indptr, out_len[1]*sizeof(int)",
                      "markdown": "`memcpy(INTEGER(out_indptr_R), out_indptr, out_len[1]*sizeof(int)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "R-package/src/lightgbm_R.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 32895,
                        "charLength": 64
                      },
                      "insertedContent": {
                        "text": "memcpy_s(INTEGER(out_indptr_R), <size of INTEGER(out_indptr_R)>,  out_indptr,  out_len[1]*sizeof(int)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        }
      ],
      "newlineSequences": [
        "\r\n",
        "\n"
      ]
    }
  ]
}