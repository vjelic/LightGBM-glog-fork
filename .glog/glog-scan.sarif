{
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "Glog.AI",
          "organization": "Glog.AI",
          "fullName": "Glog, Making software more secure",
          "version": "1.0.0",
          "semanticVersion": "1.0.0",
          "informationUri": "https://www.glog.ai",
          "rules": [
            {
              "id": "glog-b2f5c07a-36d7-401e-9768-d1b1f9dc5d61",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-8a5a01db-31e1-402e-8407-d62fbd68bf60",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-632030e1-5724-4105-a162-d4e6004ff8a9",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-e253c9de-6a41-4e83-8cce-b25bb7d3c652",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-301226b8-e411-481c-86f3-e5c420b72da5",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-ecea3566-d5da-4401-904f-7995d46bdf77",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-e54ed409-ff51-4765-94db-8f5b67571f88",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-78893315-6a11-4c08-858f-ef5210bf56be",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-4a99e4a0-be01-4c91-8475-ebfb0be12fa6",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-18aa33e7-e195-44a4-9074-229229dcbf1b",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-b37f2021-f6e9-48ae-b81a-d93d63f1da27",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-f328a281-ee8e-425b-872d-a1951e2d09bc",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-ef5a9508-098c-4044-b48f-96b88b97f4c1",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-7e96e2f1-d617-4e5a-9226-b94591cb71c7",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-0e121f19-1c51-41c3-a772-90741f5e850e",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-a2b6d044-b1ff-428f-b941-c6db191f21f5",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-f52ecd1f-c836-44a2-a081-8eaee2054f80",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-56b9812f-38ec-415d-86a6-92640e29155f",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-a9379728-b5de-4b0f-8241-bef598ef3ebf",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-9dae875d-9d4c-4d29-874f-657f6bdcab40",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-65a54812-7a87-4ae6-889d-273cce93c4c5",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-95d6df3c-30f8-495f-a763-cdae7577af6a",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-eaed50f2-27c3-42a7-910d-4f49aa95049e",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-88d6e532-793a-4013-8f99-ab8016d5ecc7",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-74b71b3f-240b-41e5-944a-afcf7c3c55f8",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-d39482c9-9363-434a-8945-74d343ad04b3",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-7bfbe15e-727d-41bd-8f25-bb20f7808201",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-062ea6ea-ae61-410a-84e0-b2a791a8b12a",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-afe943d1-8d95-40f7-8326-6a50954f6228",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-d8ce4e3f-5ce8-4417-930e-4431ca941f50",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS140021"
                ]
              }
            },
            {
              "id": "glog-274ff366-4bee-433b-b4ff-c830872f1fbe",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS140021"
                ]
              }
            },
            {
              "id": "glog-a422f958-32e8-45ac-bb01-dde487dea4ba",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS140021"
                ]
              }
            },
            {
              "id": "glog-22be8d46-c264-4845-b71d-7e0233b02402",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS148264"
                ]
              }
            },
            {
              "id": "glog-4dae8345-15c8-46db-9f0c-617a0fd6a5f2",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-0c1bc09e-077f-414b-88fd-0feba79c4b1f",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-e6d3ad52-bdb1-424c-8e55-59d6a491c4fe",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-dfec1ada-b316-4426-b650-23d0a17a5702",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS148264"
                ]
              }
            },
            {
              "id": "glog-b2dc4fe5-eae1-4fea-902c-08cbac1d8e59",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS148264"
                ]
              }
            },
            {
              "id": "glog-d1ca6472-6fc4-4e54-9140-ccf3886c31a4",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS140021"
                ]
              }
            },
            {
              "id": "glog-0112a3a9-958a-4fe8-9cd9-9b4edfcd314e",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS140021"
                ]
              }
            },
            {
              "id": "glog-ffaaf4dc-1da5-4fe6-9660-843a3ec957fd",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS148264"
                ]
              }
            },
            {
              "id": "glog-70751247-e045-47b1-9212-627435c5cee4",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS161085"
                ]
              }
            },
            {
              "id": "glog-a0fa7da8-ac45-43cb-8b1b-dc9d63394e4f",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS148264"
                ]
              }
            },
            {
              "id": "glog-db99a0e5-1aa1-4ad9-b39d-05f7d39c065c",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-c9e91dfb-d53a-42a6-8e51-a40e42f020ea",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-4b2a6428-381d-44e3-ae3e-6dd98959b9e0",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-7de8099d-6423-4f68-ad89-1da0fcc2813c",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-695c6242-013e-438a-9696-3e8a99e1493a",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-726c5aec-a1a8-4835-884b-d116f3783331",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-bda45803-e05b-460a-bfa3-ad7d8996ee08",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-8af4ef58-174d-4670-b361-33f4e66a3684",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-afae2f34-8ea9-4884-b541-e8802a8b243f",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-88c82fab-f8e2-451f-8d16-0619d70b810b",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-99666e4f-6ce8-4d8f-9b89-68aa39ab65c2",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS111237"
                ]
              }
            },
            {
              "id": "glog-61041f33-a8d5-4823-975b-ff9dfca40fdc",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-0e54342f-b076-478f-9730-1372b4c7c064",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-db6a37c2-02e7-4014-9832-c74ff33dda8e",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-f59a125c-ebd6-4268-b68c-47f9a822fad5",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-4ee44046-642a-4af0-b9a9-233265a8f880",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-d7474f4f-d16b-4a16-8231-c546877372ec",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-487817a4-8da0-4c49-84a9-586da1d60477",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-e2cf149d-0958-4b2b-ba82-64963750aae0",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-f7ccb860-1420-49c8-bcda-71f84512d56d",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-8be0c0b6-6f44-4198-aec7-4a800a485070",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-081e1fbc-f40b-4fb6-83f1-6283ef0afebf",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-8122641a-6bf2-481a-9542-d03ba1e017af",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-066a4702-00bb-4a91-8ccb-d53383960815",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-1d00e75b-f1cf-49b5-ac55-44d93da24641",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS140021"
                ]
              }
            },
            {
              "id": "glog-a5fc6c31-ca2b-48c3-95e6-0a23f92ff4ef",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS140021"
                ]
              }
            },
            {
              "id": "glog-259188b2-c4d8-4918-9c2f-2e6a0c5e4c2d",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-c9ac0ce2-5e5c-4467-bd50-8aa9bdb0a2a1",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-e5192089-f4b1-4c5e-ab2e-1618760a902c",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-8460813f-41e0-4122-a2e0-8c763e05c210",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-e7aa1a2e-4801-4106-917e-3ac1765dc189",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-7e211896-33b8-476a-a21b-a125a9fe47b3",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-7b87963e-9aeb-4e34-b704-791b7faab094",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-70e8c51b-a4a9-4999-ad95-25490ab8313c",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-baaaaf77-9af1-4461-abe2-89bd230d767b",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-0c061f7c-243f-4483-9c35-b7c2b7933ec8",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-45ae19ed-731f-45be-993b-13c3c213a988",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-47001fd9-90e7-4bf6-af5d-572962883af1",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-8fc3e4c9-79b4-4f27-aa83-8639dfb47a10",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-af5b8f22-4b8c-4963-bcf6-daead3f56a14",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-5135033f-f870-4bb1-a43a-f08d9f292e44",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-2c12a414-60e2-4768-8370-460367e17c0d",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-184fdb8b-6d98-4afb-b3e4-878af88eea22",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-1108eb4f-090a-46f9-a587-dbd13345df1d",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-0a9e6c6e-52b5-49c9-a202-cbc61b04cfb1",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-abbfc9b8-fb06-42fe-99a3-8edde8e74da4",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-20c2a229-392f-41f5-9318-eba6eabb9fe7",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-3e514b31-e711-4321-bc72-b5396b33cbb0",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-66c95229-ec85-4170-aca8-9e2aaf2975d1",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-41d4bf38-a3cb-42c4-98b8-253528bb7522",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-271cd784-4de4-4e81-893a-ff9ffd89c0a8",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-0da2715b-46c1-4c5b-80ae-5f2320c13b94",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-4c273544-8102-4650-bd26-267e202d0f68",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-c2737df7-5b5f-4666-bfdb-d5ffeee16801",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-daf72d9b-3a05-4704-b9d8-5a6c122ef891",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-01a5386f-2eed-412b-be5c-609a14efa3d8",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-669bb790-e89d-4b99-b83e-178cb12380a7",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-da001985-2ce5-4f16-a683-226e796a91ee",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-93854f5e-08c0-4f16-bd8d-44eed2fe19fa",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-9c626ada-6651-49e9-a3d5-7b1887fb7a7e",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-c5de89c1-3405-404f-8daf-3717f4dee296",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-f8c3b8b1-602c-4385-abd3-8c4fc4e598a0",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-b295e255-14b4-418e-a7e9-f042a2580def",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-184ddb78-584e-405f-a1d1-f238bdc5dd8f",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-f3b2ca8a-33aa-49e2-ba9a-67f3e1d14020",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS140021"
                ]
              }
            },
            {
              "id": "glog-ce102fe2-99bc-46b1-b984-790ed2c09011",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS148264"
                ]
              }
            },
            {
              "id": "glog-97cf0a1b-7fe5-4e8b-9498-bb0e20a2a37a",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-a3cb3cb8-ed75-450f-a8c4-ba2c0975259c",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS148264"
                ]
              }
            },
            {
              "id": "glog-b9368c7a-8e2b-40c3-b40b-17b3020ac3d3",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-745f6b88-edc2-49ad-a921-8ab3d67cdaa7",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-798e25cd-758d-422f-9341-d147235e055a",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-c677fcb4-6538-484e-b701-6ccb9a37c247",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-07a77928-9ab5-45d2-9a25-559e31e57e05",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-5b2c39ad-1537-4173-8aa2-0afa29745124",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS148264"
                ]
              }
            },
            {
              "id": "glog-28cdb383-7801-4766-abf0-b5abe396f8f9",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-d58fe311-9054-48c6-b241-94061b154069",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-b968419e-f16f-4b07-8902-7f2cd94a8706",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-73439d49-e620-4d20-95e5-1af64e18905a",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS140021"
                ]
              }
            },
            {
              "id": "glog-dee8e75a-106a-4f98-b38f-0deb24ce53bf",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-f0ef59f5-c8a1-4a13-b00a-6fe0a2352d51",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS185832"
                ]
              }
            },
            {
              "id": "glog-892346e3-b6fc-448a-b612-705b9ba6f150",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-ab7d587c-ef35-48be-b4a3-d610d11322fb",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-1f3a21c4-f141-4908-bef4-9cd7350e3526",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            }
          ],
          "language": "en-US",
          "contents": [
            "localizedData",
            "nonLocalizedData"
          ],
          "isComprehensive": false
        }
      },
      "language": "en-US",
      "results": [
        {
          "ruleId": "glog-b2f5c07a-36d7-401e-9768-d1b1f9dc5d61",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/io/metadata.cpp"
                },
                "region": {
                  "startLine": 754,
                  "startColumn": 7,
                  "endLine": 754,
                  "endColumn": 53,
                  "charOffset": 26861,
                  "charLength": 46,
                  "snippet": {
                    "text": "memcpy(label_.data(), mem_ptr, sizeof(label_t)",
                    "rendered": {
                      "text": "memcpy(label_.data(), mem_ptr, sizeof(label_t)",
                      "markdown": "`memcpy(label_.data(), mem_ptr, sizeof(label_t)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/io/metadata.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 26861,
                        "charLength": 46
                      },
                      "insertedContent": {
                        "text": "memcpy_s(label_.data(), <size of label_.data()>,  mem_ptr,  sizeof(label_t)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-8a5a01db-31e1-402e-8407-d62fbd68bf60",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/io/metadata.cpp"
                },
                "region": {
                  "startLine": 767,
                  "startColumn": 9,
                  "endLine": 767,
                  "endColumn": 70,
                  "charOffset": 27486,
                  "charLength": 61,
                  "snippet": {
                    "text": "memcpy(query_boundaries_.data(), mem_ptr, sizeof(data_size_t)",
                    "rendered": {
                      "text": "memcpy(query_boundaries_.data(), mem_ptr, sizeof(data_size_t)",
                      "markdown": "`memcpy(query_boundaries_.data(), mem_ptr, sizeof(data_size_t)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/io/metadata.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 27486,
                        "charLength": 61
                      },
                      "insertedContent": {
                        "text": "memcpy_s(query_boundaries_.data(), <size of query_boundaries_.data()>,  mem_ptr,  sizeof(data_size_t)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-632030e1-5724-4105-a162-d4e6004ff8a9",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/io/metadata.cpp"
                },
                "region": {
                  "startLine": 574,
                  "startColumn": 2,
                  "endLine": 574,
                  "endColumn": 68,
                  "charOffset": 20394,
                  "charLength": 66,
                  "snippet": {
                    "text": "memcpy(queries_.data() + start_index, queries, sizeof(data_size_t)",
                    "rendered": {
                      "text": "memcpy(queries_.data() + start_index, queries, sizeof(data_size_t)",
                      "markdown": "`memcpy(queries_.data() + start_index, queries, sizeof(data_size_t)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/io/metadata.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 20394,
                        "charLength": 66
                      },
                      "insertedContent": {
                        "text": "memcpy_s(queries_.data() + start_index, <size of queries_.data() + start_index>,  queries,  sizeof(data_size_t)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-e253c9de-6a41-4e83-8cce-b25bb7d3c652",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/io/metadata.cpp"
                },
                "region": {
                  "startLine": 760,
                  "startColumn": 9,
                  "endLine": 760,
                  "endColumn": 57,
                  "charOffset": 27132,
                  "charLength": 48,
                  "snippet": {
                    "text": "memcpy(weights_.data(), mem_ptr, sizeof(label_t)",
                    "rendered": {
                      "text": "memcpy(weights_.data(), mem_ptr, sizeof(label_t)",
                      "markdown": "`memcpy(weights_.data(), mem_ptr, sizeof(label_t)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/io/metadata.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 27132,
                        "charLength": 48
                      },
                      "insertedContent": {
                        "text": "memcpy_s(weights_.data(), <size of weights_.data()>,  mem_ptr,  sizeof(label_t)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-301226b8-e411-481c-86f3-e5c420b72da5",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/io/metadata.cpp"
                },
                "region": {
                  "startLine": 480,
                  "startColumn": 2,
                  "endLine": 480,
                  "endColumn": 64,
                  "charOffset": 17328,
                  "charLength": 62,
                  "snippet": {
                    "text": "memcpy(weights_.data() + start_index, weights, sizeof(label_t)",
                    "rendered": {
                      "text": "memcpy(weights_.data() + start_index, weights, sizeof(label_t)",
                      "markdown": "`memcpy(weights_.data() + start_index, weights, sizeof(label_t)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/io/metadata.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 17328,
                        "charLength": 62
                      },
                      "insertedContent": {
                        "text": "memcpy_s(weights_.data() + start_index, <size of weights_.data() + start_index>,  weights,  sizeof(label_t)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-ecea3566-d5da-4401-904f-7995d46bdf77",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/io/metadata.cpp"
                },
                "region": {
                  "startLine": 436,
                  "startColumn": 2,
                  "endLine": 436,
                  "endColumn": 61,
                  "charOffset": 15954,
                  "charLength": 59,
                  "snippet": {
                    "text": "memcpy(label_.data() + start_index, labels, sizeof(label_t)",
                    "rendered": {
                      "text": "memcpy(label_.data() + start_index, labels, sizeof(label_t)",
                      "markdown": "`memcpy(label_.data() + start_index, labels, sizeof(label_t)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/io/metadata.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 15954,
                        "charLength": 59
                      },
                      "insertedContent": {
                        "text": "memcpy_s(label_.data() + start_index, <size of label_.data() + start_index>,  labels,  sizeof(label_t)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-e54ed409-ff51-4765-94db-8f5b67571f88",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/io/metadata.cpp"
                },
                "region": {
                  "startLine": 400,
                  "startColumn": 4,
                  "endLine": 400,
                  "endColumn": 88,
                  "charOffset": 14776,
                  "charLength": 84,
                  "snippet": {
                    "text": "memcpy(init_score_.data() + dest_offset, init_scores + source_offset, sizeof(double)",
                    "rendered": {
                      "text": "memcpy(init_score_.data() + dest_offset, init_scores + source_offset, sizeof(double)",
                      "markdown": "`memcpy(init_score_.data() + dest_offset, init_scores + source_offset, sizeof(double)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/io/metadata.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 14776,
                        "charLength": 84
                      },
                      "insertedContent": {
                        "text": "memcpy_s(init_score_.data() + dest_offset, <size of init_score_.data() + dest_offset>,  init_scores + source_offset,  sizeof(double)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-78893315-6a11-4c08-858f-ef5210bf56be",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/io/bin.cpp"
                },
                "region": {
                  "startLine": 558,
                  "startColumn": 11,
                  "endLine": 558,
                  "endColumn": 75,
                  "charOffset": 22444,
                  "charLength": 64,
                  "snippet": {
                    "text": "memcpy(bin_2_categorical_.data(), buffer, num_bin_ * sizeof(int)",
                    "rendered": {
                      "text": "memcpy(bin_2_categorical_.data(), buffer, num_bin_ * sizeof(int)",
                      "markdown": "`memcpy(bin_2_categorical_.data(), buffer, num_bin_ * sizeof(int)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/io/bin.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 22444,
                        "charLength": 64
                      },
                      "insertedContent": {
                        "text": "memcpy_s(bin_2_categorical_.data(), <size of bin_2_categorical_.data()>,  buffer,  num_bin_ * sizeof(int)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-4a99e4a0-be01-4c91-8475-ebfb0be12fa6",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/io/bin.cpp"
                },
                "region": {
                  "startLine": 555,
                  "startColumn": 11,
                  "endLine": 555,
                  "endColumn": 76,
                  "charOffset": 22297,
                  "charLength": 65,
                  "snippet": {
                    "text": "memcpy(bin_upper_bound_.data(), buffer, num_bin_ * sizeof(double)",
                    "rendered": {
                      "text": "memcpy(bin_upper_bound_.data(), buffer, num_bin_ * sizeof(double)",
                      "markdown": "`memcpy(bin_upper_bound_.data(), buffer, num_bin_ * sizeof(double)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/io/bin.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 22297,
                        "charLength": 65
                      },
                      "insertedContent": {
                        "text": "memcpy_s(bin_upper_bound_.data(), <size of bin_upper_bound_.data()>,  buffer,  num_bin_ * sizeof(double)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-18aa33e7-e195-44a4-9074-229229dcbf1b",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/io/bin.cpp"
                },
                "region": {
                  "startLine": 551,
                  "startColumn": 9,
                  "endLine": 551,
                  "endColumn": 63,
                  "charOffset": 22057,
                  "charLength": 54,
                  "snippet": {
                    "text": "memcpy(&most_freq_bin_, buffer, sizeof(most_freq_bin_)",
                    "rendered": {
                      "text": "memcpy(&most_freq_bin_, buffer, sizeof(most_freq_bin_)",
                      "markdown": "`memcpy(&most_freq_bin_, buffer, sizeof(most_freq_bin_)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/io/bin.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 22057,
                        "charLength": 54
                      },
                      "insertedContent": {
                        "text": "memcpy_s(&most_freq_bin_, <size of &most_freq_bin_>,  buffer,  sizeof(most_freq_bin_)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-b37f2021-f6e9-48ae-b81a-d93d63f1da27",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/io/bin.cpp"
                },
                "region": {
                  "startLine": 549,
                  "startColumn": 9,
                  "endLine": 549,
                  "endColumn": 59,
                  "charOffset": 21927,
                  "charLength": 50,
                  "snippet": {
                    "text": "memcpy(&default_bin_, buffer, sizeof(default_bin_)",
                    "rendered": {
                      "text": "memcpy(&default_bin_, buffer, sizeof(default_bin_)",
                      "markdown": "`memcpy(&default_bin_, buffer, sizeof(default_bin_)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/io/bin.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 21927,
                        "charLength": 50
                      },
                      "insertedContent": {
                        "text": "memcpy_s(&default_bin_, <size of &default_bin_>,  buffer,  sizeof(default_bin_)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-f328a281-ee8e-425b-872d-a1951e2d09bc",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/io/bin.cpp"
                },
                "region": {
                  "startLine": 547,
                  "startColumn": 9,
                  "endLine": 547,
                  "endColumn": 51,
                  "charOffset": 21841,
                  "charLength": 42,
                  "snippet": {
                    "text": "memcpy(&max_val_, buffer, sizeof(max_val_)",
                    "rendered": {
                      "text": "memcpy(&max_val_, buffer, sizeof(max_val_)",
                      "markdown": "`memcpy(&max_val_, buffer, sizeof(max_val_)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/io/bin.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 21841,
                        "charLength": 42
                      },
                      "insertedContent": {
                        "text": "memcpy_s(&max_val_, <size of &max_val_>,  buffer,  sizeof(max_val_)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-ef5a9508-098c-4044-b48f-96b88b97f4c1",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/io/bin.cpp"
                },
                "region": {
                  "startLine": 545,
                  "startColumn": 9,
                  "endLine": 545,
                  "endColumn": 51,
                  "charOffset": 21755,
                  "charLength": 42,
                  "snippet": {
                    "text": "memcpy(&min_val_, buffer, sizeof(min_val_)",
                    "rendered": {
                      "text": "memcpy(&min_val_, buffer, sizeof(min_val_)",
                      "markdown": "`memcpy(&min_val_, buffer, sizeof(min_val_)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/io/bin.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 21755,
                        "charLength": 42
                      },
                      "insertedContent": {
                        "text": "memcpy_s(&min_val_, <size of &min_val_>,  buffer,  sizeof(min_val_)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-7e96e2f1-d617-4e5a-9226-b94591cb71c7",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/io/bin.cpp"
                },
                "region": {
                  "startLine": 543,
                  "startColumn": 9,
                  "endLine": 543,
                  "endColumn": 53,
                  "charOffset": 21634,
                  "charLength": 44,
                  "snippet": {
                    "text": "memcpy(&bin_type_, buffer, sizeof(bin_type_)",
                    "rendered": {
                      "text": "memcpy(&bin_type_, buffer, sizeof(bin_type_)",
                      "markdown": "`memcpy(&bin_type_, buffer, sizeof(bin_type_)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/io/bin.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 21634,
                        "charLength": 44
                      },
                      "insertedContent": {
                        "text": "memcpy_s(&bin_type_, <size of &bin_type_>,  buffer,  sizeof(bin_type_)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-0e121f19-1c51-41c3-a772-90741f5e850e",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/io/bin.cpp"
                },
                "region": {
                  "startLine": 541,
                  "startColumn": 9,
                  "endLine": 541,
                  "endColumn": 59,
                  "charOffset": 21536,
                  "charLength": 50,
                  "snippet": {
                    "text": "memcpy(&sparse_rate_, buffer, sizeof(sparse_rate_)",
                    "rendered": {
                      "text": "memcpy(&sparse_rate_, buffer, sizeof(sparse_rate_)",
                      "markdown": "`memcpy(&sparse_rate_, buffer, sizeof(sparse_rate_)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/io/bin.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 21536,
                        "charLength": 50
                      },
                      "insertedContent": {
                        "text": "memcpy_s(&sparse_rate_, <size of &sparse_rate_>,  buffer,  sizeof(sparse_rate_)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-a2b6d044-b1ff-428f-b941-c6db191f21f5",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/io/bin.cpp"
                },
                "region": {
                  "startLine": 539,
                  "startColumn": 9,
                  "endLine": 539,
                  "endColumn": 57,
                  "charOffset": 21409,
                  "charLength": 48,
                  "snippet": {
                    "text": "memcpy(&is_trivial_, buffer, sizeof(is_trivial_)",
                    "rendered": {
                      "text": "memcpy(&is_trivial_, buffer, sizeof(is_trivial_)",
                      "markdown": "`memcpy(&is_trivial_, buffer, sizeof(is_trivial_)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/io/bin.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 21409,
                        "charLength": 48
                      },
                      "insertedContent": {
                        "text": "memcpy_s(&is_trivial_, <size of &is_trivial_>,  buffer,  sizeof(is_trivial_)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-f52ecd1f-c836-44a2-a081-8eaee2054f80",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/io/bin.cpp"
                },
                "region": {
                  "startLine": 537,
                  "startColumn": 9,
                  "endLine": 537,
                  "endColumn": 61,
                  "charOffset": 21276,
                  "charLength": 52,
                  "snippet": {
                    "text": "memcpy(&missing_type_, buffer, sizeof(missing_type_)",
                    "rendered": {
                      "text": "memcpy(&missing_type_, buffer, sizeof(missing_type_)",
                      "markdown": "`memcpy(&missing_type_, buffer, sizeof(missing_type_)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/io/bin.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 21276,
                        "charLength": 52
                      },
                      "insertedContent": {
                        "text": "memcpy_s(&missing_type_, <size of &missing_type_>,  buffer,  sizeof(missing_type_)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-56b9812f-38ec-415d-86a6-92640e29155f",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/io/bin.cpp"
                },
                "region": {
                  "startLine": 535,
                  "startColumn": 9,
                  "endLine": 535,
                  "endColumn": 51,
                  "charOffset": 21158,
                  "charLength": 42,
                  "snippet": {
                    "text": "memcpy(&num_bin_, buffer, sizeof(num_bin_)",
                    "rendered": {
                      "text": "memcpy(&num_bin_, buffer, sizeof(num_bin_)",
                      "markdown": "`memcpy(&num_bin_, buffer, sizeof(num_bin_)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/io/bin.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 21158,
                        "charLength": 42
                      },
                      "insertedContent": {
                        "text": "memcpy_s(&num_bin_, <size of &num_bin_>,  buffer,  sizeof(num_bin_)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-a9379728-b5de-4b0f-8241-bef598ef3ebf",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/io/bin.cpp"
                },
                "region": {
                  "startLine": 530,
                  "startColumn": 11,
                  "endLine": 530,
                  "endColumn": 75,
                  "charOffset": 21021,
                  "charLength": 64,
                  "snippet": {
                    "text": "memcpy(buffer, bin_2_categorical_.data(), num_bin_ * sizeof(int)",
                    "rendered": {
                      "text": "memcpy(buffer, bin_2_categorical_.data(), num_bin_ * sizeof(int)",
                      "markdown": "`memcpy(buffer, bin_2_categorical_.data(), num_bin_ * sizeof(int)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/io/bin.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 21021,
                        "charLength": 64
                      },
                      "insertedContent": {
                        "text": "memcpy_s(buffer, <size of buffer>,  bin_2_categorical_.data(),  num_bin_ * sizeof(int)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-9dae875d-9d4c-4d29-874f-657f6bdcab40",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/io/bin.cpp"
                },
                "region": {
                  "startLine": 528,
                  "startColumn": 11,
                  "endLine": 528,
                  "endColumn": 76,
                  "charOffset": 20929,
                  "charLength": 65,
                  "snippet": {
                    "text": "memcpy(buffer, bin_upper_bound_.data(), num_bin_ * sizeof(double)",
                    "rendered": {
                      "text": "memcpy(buffer, bin_upper_bound_.data(), num_bin_ * sizeof(double)",
                      "markdown": "`memcpy(buffer, bin_upper_bound_.data(), num_bin_ * sizeof(double)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/io/bin.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 20929,
                        "charLength": 65
                      },
                      "insertedContent": {
                        "text": "memcpy_s(buffer, <size of buffer>,  bin_upper_bound_.data(),  num_bin_ * sizeof(double)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-65a54812-7a87-4ae6-889d-273cce93c4c5",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/io/bin.cpp"
                },
                "region": {
                  "startLine": 525,
                  "startColumn": 9,
                  "endLine": 525,
                  "endColumn": 63,
                  "charOffset": 20745,
                  "charLength": 54,
                  "snippet": {
                    "text": "memcpy(buffer, &most_freq_bin_, sizeof(most_freq_bin_)",
                    "rendered": {
                      "text": "memcpy(buffer, &most_freq_bin_, sizeof(most_freq_bin_)",
                      "markdown": "`memcpy(buffer, &most_freq_bin_, sizeof(most_freq_bin_)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/io/bin.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 20745,
                        "charLength": 54
                      },
                      "insertedContent": {
                        "text": "memcpy_s(buffer, <size of buffer>,  &most_freq_bin_,  sizeof(most_freq_bin_)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-95d6df3c-30f8-495f-a763-cdae7577af6a",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/io/bin.cpp"
                },
                "region": {
                  "startLine": 523,
                  "startColumn": 9,
                  "endLine": 523,
                  "endColumn": 59,
                  "charOffset": 20615,
                  "charLength": 50,
                  "snippet": {
                    "text": "memcpy(buffer, &default_bin_, sizeof(default_bin_)",
                    "rendered": {
                      "text": "memcpy(buffer, &default_bin_, sizeof(default_bin_)",
                      "markdown": "`memcpy(buffer, &default_bin_, sizeof(default_bin_)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/io/bin.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 20615,
                        "charLength": 50
                      },
                      "insertedContent": {
                        "text": "memcpy_s(buffer, <size of buffer>,  &default_bin_,  sizeof(default_bin_)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-eaed50f2-27c3-42a7-910d-4f49aa95049e",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/io/bin.cpp"
                },
                "region": {
                  "startLine": 521,
                  "startColumn": 9,
                  "endLine": 521,
                  "endColumn": 51,
                  "charOffset": 20529,
                  "charLength": 42,
                  "snippet": {
                    "text": "memcpy(buffer, &max_val_, sizeof(max_val_)",
                    "rendered": {
                      "text": "memcpy(buffer, &max_val_, sizeof(max_val_)",
                      "markdown": "`memcpy(buffer, &max_val_, sizeof(max_val_)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/io/bin.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 20529,
                        "charLength": 42
                      },
                      "insertedContent": {
                        "text": "memcpy_s(buffer, <size of buffer>,  &max_val_,  sizeof(max_val_)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-88d6e532-793a-4013-8f99-ab8016d5ecc7",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/io/bin.cpp"
                },
                "region": {
                  "startLine": 519,
                  "startColumn": 9,
                  "endLine": 519,
                  "endColumn": 51,
                  "charOffset": 20443,
                  "charLength": 42,
                  "snippet": {
                    "text": "memcpy(buffer, &min_val_, sizeof(min_val_)",
                    "rendered": {
                      "text": "memcpy(buffer, &min_val_, sizeof(min_val_)",
                      "markdown": "`memcpy(buffer, &min_val_, sizeof(min_val_)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/io/bin.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 20443,
                        "charLength": 42
                      },
                      "insertedContent": {
                        "text": "memcpy_s(buffer, <size of buffer>,  &min_val_,  sizeof(min_val_)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-74b71b3f-240b-41e5-944a-afcf7c3c55f8",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/io/bin.cpp"
                },
                "region": {
                  "startLine": 517,
                  "startColumn": 9,
                  "endLine": 517,
                  "endColumn": 53,
                  "charOffset": 20322,
                  "charLength": 44,
                  "snippet": {
                    "text": "memcpy(buffer, &bin_type_, sizeof(bin_type_)",
                    "rendered": {
                      "text": "memcpy(buffer, &bin_type_, sizeof(bin_type_)",
                      "markdown": "`memcpy(buffer, &bin_type_, sizeof(bin_type_)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/io/bin.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 20322,
                        "charLength": 44
                      },
                      "insertedContent": {
                        "text": "memcpy_s(buffer, <size of buffer>,  &bin_type_,  sizeof(bin_type_)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-d39482c9-9363-434a-8945-74d343ad04b3",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/io/bin.cpp"
                },
                "region": {
                  "startLine": 515,
                  "startColumn": 9,
                  "endLine": 515,
                  "endColumn": 59,
                  "charOffset": 20224,
                  "charLength": 50,
                  "snippet": {
                    "text": "memcpy(buffer, &sparse_rate_, sizeof(sparse_rate_)",
                    "rendered": {
                      "text": "memcpy(buffer, &sparse_rate_, sizeof(sparse_rate_)",
                      "markdown": "`memcpy(buffer, &sparse_rate_, sizeof(sparse_rate_)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/io/bin.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 20224,
                        "charLength": 50
                      },
                      "insertedContent": {
                        "text": "memcpy_s(buffer, <size of buffer>,  &sparse_rate_,  sizeof(sparse_rate_)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-7bfbe15e-727d-41bd-8f25-bb20f7808201",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/io/bin.cpp"
                },
                "region": {
                  "startLine": 513,
                  "startColumn": 9,
                  "endLine": 513,
                  "endColumn": 57,
                  "charOffset": 20097,
                  "charLength": 48,
                  "snippet": {
                    "text": "memcpy(buffer, &is_trivial_, sizeof(is_trivial_)",
                    "rendered": {
                      "text": "memcpy(buffer, &is_trivial_, sizeof(is_trivial_)",
                      "markdown": "`memcpy(buffer, &is_trivial_, sizeof(is_trivial_)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/io/bin.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 20097,
                        "charLength": 48
                      },
                      "insertedContent": {
                        "text": "memcpy_s(buffer, <size of buffer>,  &is_trivial_,  sizeof(is_trivial_)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-062ea6ea-ae61-410a-84e0-b2a791a8b12a",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/io/bin.cpp"
                },
                "region": {
                  "startLine": 511,
                  "startColumn": 9,
                  "endLine": 511,
                  "endColumn": 61,
                  "charOffset": 19964,
                  "charLength": 52,
                  "snippet": {
                    "text": "memcpy(buffer, &missing_type_, sizeof(missing_type_)",
                    "rendered": {
                      "text": "memcpy(buffer, &missing_type_, sizeof(missing_type_)",
                      "markdown": "`memcpy(buffer, &missing_type_, sizeof(missing_type_)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/io/bin.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 19964,
                        "charLength": 52
                      },
                      "insertedContent": {
                        "text": "memcpy_s(buffer, <size of buffer>,  &missing_type_,  sizeof(missing_type_)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-afe943d1-8d95-40f7-8326-6a50954f6228",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/io/bin.cpp"
                },
                "region": {
                  "startLine": 509,
                  "startColumn": 9,
                  "endLine": 509,
                  "endColumn": 51,
                  "charOffset": 19846,
                  "charLength": 42,
                  "snippet": {
                    "text": "memcpy(buffer, &num_bin_, sizeof(num_bin_)",
                    "rendered": {
                      "text": "memcpy(buffer, &num_bin_, sizeof(num_bin_)",
                      "markdown": "`memcpy(buffer, &num_bin_, sizeof(num_bin_)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/io/bin.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 19846,
                        "charLength": 42
                      },
                      "insertedContent": {
                        "text": "memcpy_s(buffer, <size of buffer>,  &num_bin_,  sizeof(num_bin_)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-d8ce4e3f-5ce8-4417-930e-4431ca941f50",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/io/dataset_loader.cpp"
                },
                "region": {
                  "startLine": 1483,
                  "startColumn": 30,
                  "endLine": 1483,
                  "endColumn": 64,
                  "charOffset": 65594,
                  "charLength": 34,
                  "snippet": {
                    "text": "strlen(Dataset::binary_file_token)",
                    "rendered": {
                      "text": "strlen(Dataset::binary_file_token)",
                      "markdown": "`strlen(Dataset::binary_file_token)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/io/dataset_loader.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 65594,
                        "charLength": 34
                      },
                      "insertedContent": {
                        "text": "strlen_s(Dataset::binary_file_token, <size of Dataset::binary_file_token>)"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/io/dataset_loader.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 65594,
                        "charLength": 34
                      },
                      "insertedContent": {
                        "text": "strnlen(Dataset::binary_file_token, <size of Dataset::binary_file_token>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-274ff366-4bee-433b-b4ff-c830872f1fbe",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/io/dataset_loader.cpp"
                },
                "region": {
                  "startLine": 432,
                  "startColumn": 30,
                  "endLine": 432,
                  "endColumn": 64,
                  "charOffset": 18234,
                  "charLength": 34,
                  "snippet": {
                    "text": "strlen(Dataset::binary_file_token)",
                    "rendered": {
                      "text": "strlen(Dataset::binary_file_token)",
                      "markdown": "`strlen(Dataset::binary_file_token)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/io/dataset_loader.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 18234,
                        "charLength": 34
                      },
                      "insertedContent": {
                        "text": "strlen_s(Dataset::binary_file_token, <size of Dataset::binary_file_token>)"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/io/dataset_loader.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 18234,
                        "charLength": 34
                      },
                      "insertedContent": {
                        "text": "strnlen(Dataset::binary_file_token, <size of Dataset::binary_file_token>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-a422f958-32e8-45ac-bb01-dde487dea4ba",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/io/dataset_loader.cpp"
                },
                "region": {
                  "startLine": 362,
                  "startColumn": 36,
                  "endLine": 362,
                  "endColumn": 86,
                  "charOffset": 15212,
                  "charLength": 50,
                  "snippet": {
                    "text": "strlen(Dataset::binary_serialized_reference_token)",
                    "rendered": {
                      "text": "strlen(Dataset::binary_serialized_reference_token)",
                      "markdown": "`strlen(Dataset::binary_serialized_reference_token)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/io/dataset_loader.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 15212,
                        "charLength": 50
                      },
                      "insertedContent": {
                        "text": "strlen_s(Dataset::binary_serialized_reference_token, <size of Dataset::binary_serialized_reference_token>)"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/io/dataset_loader.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 15212,
                        "charLength": 50
                      },
                      "insertedContent": {
                        "text": "strnlen(Dataset::binary_serialized_reference_token, <size of Dataset::binary_serialized_reference_token>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-22be8d46-c264-4845-b71d-7e0233b02402",
          "kind": "fail",
          "level": "error",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/treelearner/feature_histogram.hpp"
                },
                "region": {
                  "startLine": 1724,
                  "startColumn": 35,
                  "endLine": 1724,
                  "endColumn": 42,
                  "charOffset": 75365,
                  "charLength": 7,
                  "snippet": {
                    "text": "Random(",
                    "rendered": {
                      "text": "Random(",
                      "markdown": "`Random(`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.PRNG.Weak"
            ]
          }
        },
        {
          "ruleId": "glog-4dae8345-15c8-46db-9f0c-617a0fd6a5f2",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/treelearner/feature_histogram.hpp"
                },
                "region": {
                  "startLine": 971,
                  "startColumn": 9,
                  "endLine": 972,
                  "endColumn": 48,
                  "charOffset": 41527,
                  "charLength": 81,
                  "snippet": {
                    "text": "memcpy(data_int16_, memory_data,\n                (meta_->num_bin - meta_->offset)",
                    "rendered": {
                      "text": "memcpy(data_int16_, memory_data,\n                (meta_->num_bin - meta_->offset)",
                      "markdown": "`memcpy(data_int16_, memory_data,\n                (meta_->num_bin - meta_->offset)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/treelearner/feature_histogram.hpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 41527,
                        "charLength": 81
                      },
                      "insertedContent": {
                        "text": "memcpy_s(data_int16_, <size of data_int16_>,  memory_data, \n                (meta_->num_bin - meta_->offset)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-0c1bc09e-077f-414b-88fd-0feba79c4b1f",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/treelearner/feature_histogram.hpp"
                },
                "region": {
                  "startLine": 966,
                  "startColumn": 9,
                  "endLine": 967,
                  "endColumn": 48,
                  "charOffset": 41369,
                  "charLength": 75,
                  "snippet": {
                    "text": "memcpy(data_, memory_data,\n                (meta_->num_bin - meta_->offset)",
                    "rendered": {
                      "text": "memcpy(data_, memory_data,\n                (meta_->num_bin - meta_->offset)",
                      "markdown": "`memcpy(data_, memory_data,\n                (meta_->num_bin - meta_->offset)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/treelearner/feature_histogram.hpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 41369,
                        "charLength": 75
                      },
                      "insertedContent": {
                        "text": "memcpy_s(data_, <size of data_>,  memory_data, \n                (meta_->num_bin - meta_->offset)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-e6d3ad52-bdb1-424c-8e55-59d6a491c4fe",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/treelearner/feature_histogram.hpp"
                },
                "region": {
                  "startLine": 961,
                  "startColumn": 9,
                  "endLine": 962,
                  "endColumn": 48,
                  "charOffset": 41216,
                  "charLength": 75,
                  "snippet": {
                    "text": "memcpy(data_, memory_data,\n                (meta_->num_bin - meta_->offset)",
                    "rendered": {
                      "text": "memcpy(data_, memory_data,\n                (meta_->num_bin - meta_->offset)",
                      "markdown": "`memcpy(data_, memory_data,\n                (meta_->num_bin - meta_->offset)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/treelearner/feature_histogram.hpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 41216,
                        "charLength": 75
                      },
                      "insertedContent": {
                        "text": "memcpy_s(data_, <size of data_>,  memory_data, \n                (meta_->num_bin - meta_->offset)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-dfec1ada-b316-4426-b650-23d0a17a5702",
          "kind": "fail",
          "level": "error",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/io/config.cpp"
                },
                "region": {
                  "startLine": 245,
                  "startColumn": 11,
                  "endLine": 245,
                  "endColumn": 16,
                  "charOffset": 9649,
                  "charLength": 5,
                  "snippet": {
                    "text": "rand(",
                    "rendered": {
                      "text": "rand(",
                      "markdown": "`rand(`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.PRNG.Weak"
            ]
          }
        },
        {
          "ruleId": "glog-b2dc4fe5-eae1-4fea-902c-08cbac1d8e59",
          "kind": "fail",
          "level": "error",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "include/LightGBM/utils/random.h"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 11,
                  "endLine": 32,
                  "endColumn": 18,
                  "charOffset": 694,
                  "charLength": 7,
                  "snippet": {
                    "text": "Random(",
                    "rendered": {
                      "text": "Random(",
                      "markdown": "`Random(`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.PRNG.Weak"
            ]
          }
        },
        {
          "ruleId": "glog-d1ca6472-6fc4-4e54-9140-ccf3886c31a4",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/io/dataset.cpp"
                },
                "region": {
                  "startLine": 1025,
                  "startColumn": 32,
                  "endLine": 1025,
                  "endColumn": 57,
                  "charOffset": 39283,
                  "charLength": 25,
                  "snippet": {
                    "text": "strlen(binary_file_token)",
                    "rendered": {
                      "text": "strlen(binary_file_token)",
                      "markdown": "`strlen(binary_file_token)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/io/dataset.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 39283,
                        "charLength": 25
                      },
                      "insertedContent": {
                        "text": "strlen_s(binary_file_token, <size of binary_file_token>)"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/io/dataset.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 39283,
                        "charLength": 25
                      },
                      "insertedContent": {
                        "text": "strnlen(binary_file_token, <size of binary_file_token>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-0112a3a9-958a-4fe8-9cd9-9b4edfcd314e",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/io/dataset.cpp"
                },
                "region": {
                  "startLine": 1064,
                  "startColumn": 30,
                  "endLine": 1064,
                  "endColumn": 71,
                  "charOffset": 40576,
                  "charLength": 41,
                  "snippet": {
                    "text": "strlen(binary_serialized_reference_token)",
                    "rendered": {
                      "text": "strlen(binary_serialized_reference_token)",
                      "markdown": "`strlen(binary_serialized_reference_token)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/io/dataset.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 40576,
                        "charLength": 41
                      },
                      "insertedContent": {
                        "text": "strlen_s(binary_serialized_reference_token, <size of binary_serialized_reference_token>)"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/io/dataset.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 40576,
                        "charLength": 41
                      },
                      "insertedContent": {
                        "text": "strnlen(binary_serialized_reference_token, <size of binary_serialized_reference_token>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-ffaaf4dc-1da5-4fe6-9660-843a3ec957fd",
          "kind": "fail",
          "level": "error",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/io/dataset.cpp"
                },
                "region": {
                  "startLine": 119,
                  "startColumn": 9,
                  "endLine": 119,
                  "endColumn": 14,
                  "charOffset": 3496,
                  "charLength": 5,
                  "snippet": {
                    "text": "rand(",
                    "rendered": {
                      "text": "rand(",
                      "markdown": "`rand(`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.PRNG.Weak"
            ]
          }
        },
        {
          "ruleId": "glog-70751247-e045-47b1-9212-627435c5cee4",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "include/LightGBM/utils/common.h"
                },
                "region": {
                  "startLine": 53,
                  "startColumn": 25,
                  "endLine": 53,
                  "endColumn": 34,
                  "charOffset": 1380,
                  "charLength": 9,
                  "snippet": {
                    "text": "malloc(a)",
                    "rendered": {
                      "text": "malloc(a)",
                      "markdown": "`malloc(a)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If the value provided to malloc is the result of unsafe integer math, it can result in an exploitable condition. "
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "include/LightGBM/utils/common.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1380,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "calloc(<number of elements>, <size of each element>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-a0fa7da8-ac45-43cb-8b1b-dc9d63394e4f",
          "kind": "fail",
          "level": "error",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/treelearner/col_sampler.hpp"
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 16,
                  "endLine": 61,
                  "endColumn": 23,
                  "charOffset": 2137,
                  "charLength": 7,
                  "snippet": {
                    "text": "Random(",
                    "rendered": {
                      "text": "Random(",
                      "markdown": "`Random(`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.PRNG.Weak"
            ]
          }
        },
        {
          "ruleId": "glog-db99a0e5-1aa1-4ad9-b39d-05f7d39c065c",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "include/LightGBM/network.h"
                },
                "region": {
                  "startLine": 205,
                  "startColumn": 15,
                  "endLine": 205,
                  "endColumn": 42,
                  "charOffset": 7629,
                  "charLength": 27,
                  "snippet": {
                    "text": "memcpy(dst, src, type_size)",
                    "rendered": {
                      "text": "memcpy(dst, src, type_size)",
                      "markdown": "`memcpy(dst, src, type_size)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "include/LightGBM/network.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 7629,
                        "charLength": 27
                      },
                      "insertedContent": {
                        "text": "memcpy_s(dst, <size of dst>,  src,  type_size)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-c9e91dfb-d53a-42a6-8e51-a40e42f020ea",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "include/LightGBM/network.h"
                },
                "region": {
                  "startLine": 182,
                  "startColumn": 15,
                  "endLine": 182,
                  "endColumn": 42,
                  "charOffset": 6941,
                  "charLength": 27,
                  "snippet": {
                    "text": "memcpy(dst, src, type_size)",
                    "rendered": {
                      "text": "memcpy(dst, src, type_size)",
                      "markdown": "`memcpy(dst, src, type_size)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "include/LightGBM/network.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 6941,
                        "charLength": 27
                      },
                      "insertedContent": {
                        "text": "memcpy_s(dst, <size of dst>,  src,  type_size)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-4b2a6428-381d-44e3-ae3e-6dd98959b9e0",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/treelearner/voting_parallel_tree_learner.cpp"
                },
                "region": {
                  "startLine": 372,
                  "startColumn": 11,
                  "endLine": 372,
                  "endColumn": 109,
                  "charOffset": 17326,
                  "charLength": 98,
                  "snippet": {
                    "text": "memcpy(&smaller_top_k_splits_global.back(), output_buffer_.data() + offset, sizeof(LightSplitInfo)",
                    "rendered": {
                      "text": "memcpy(&smaller_top_k_splits_global.back(), output_buffer_.data() + offset, sizeof(LightSplitInfo)",
                      "markdown": "`memcpy(&smaller_top_k_splits_global.back(), output_buffer_.data() + offset, sizeof(LightSplitInfo)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/treelearner/voting_parallel_tree_learner.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 17326,
                        "charLength": 98
                      },
                      "insertedContent": {
                        "text": "memcpy_s(&smaller_top_k_splits_global.back(), <size of &smaller_top_k_splits_global.back()>,  output_buffer_.data() + offset,  sizeof(LightSplitInfo)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-7de8099d-6423-4f68-ad89-1da0fcc2813c",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/treelearner/voting_parallel_tree_learner.cpp"
                },
                "region": {
                  "startLine": 375,
                  "startColumn": 11,
                  "endLine": 375,
                  "endColumn": 108,
                  "charOffset": 17540,
                  "charLength": 97,
                  "snippet": {
                    "text": "memcpy(&larger_top_k_splits_global.back(), output_buffer_.data() + offset, sizeof(LightSplitInfo)",
                    "rendered": {
                      "text": "memcpy(&larger_top_k_splits_global.back(), output_buffer_.data() + offset, sizeof(LightSplitInfo)",
                      "markdown": "`memcpy(&larger_top_k_splits_global.back(), output_buffer_.data() + offset, sizeof(LightSplitInfo)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/treelearner/voting_parallel_tree_learner.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 17540,
                        "charLength": 97
                      },
                      "insertedContent": {
                        "text": "memcpy_s(&larger_top_k_splits_global.back(), <size of &larger_top_k_splits_global.back()>,  output_buffer_.data() + offset,  sizeof(LightSplitInfo)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-695c6242-013e-438a-9696-3e8a99e1493a",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/treelearner/voting_parallel_tree_learner.cpp"
                },
                "region": {
                  "startLine": 361,
                  "startColumn": 9,
                  "endLine": 361,
                  "endColumn": 100,
                  "charOffset": 16790,
                  "charLength": 91,
                  "snippet": {
                    "text": "memcpy(input_buffer_.data() + offset, &larger_top_k_light_splits[i], sizeof(LightSplitInfo)",
                    "rendered": {
                      "text": "memcpy(input_buffer_.data() + offset, &larger_top_k_light_splits[i], sizeof(LightSplitInfo)",
                      "markdown": "`memcpy(input_buffer_.data() + offset, &larger_top_k_light_splits[i], sizeof(LightSplitInfo)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/treelearner/voting_parallel_tree_learner.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 16790,
                        "charLength": 91
                      },
                      "insertedContent": {
                        "text": "memcpy_s(input_buffer_.data() + offset, <size of input_buffer_.data() + offset>,  &larger_top_k_light_splits[i],  sizeof(LightSplitInfo)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-726c5aec-a1a8-4835-884b-d116f3783331",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/treelearner/voting_parallel_tree_learner.cpp"
                },
                "region": {
                  "startLine": 359,
                  "startColumn": 9,
                  "endLine": 359,
                  "endColumn": 101,
                  "charOffset": 16648,
                  "charLength": 92,
                  "snippet": {
                    "text": "memcpy(input_buffer_.data() + offset, &smaller_top_k_light_splits[i], sizeof(LightSplitInfo)",
                    "rendered": {
                      "text": "memcpy(input_buffer_.data() + offset, &smaller_top_k_light_splits[i], sizeof(LightSplitInfo)",
                      "markdown": "`memcpy(input_buffer_.data() + offset, &smaller_top_k_light_splits[i], sizeof(LightSplitInfo)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/treelearner/voting_parallel_tree_learner.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 16648,
                        "charLength": 92
                      },
                      "insertedContent": {
                        "text": "memcpy_s(input_buffer_.data() + offset, <size of input_buffer_.data() + offset>,  &smaller_top_k_light_splits[i],  sizeof(LightSplitInfo)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-bda45803-e05b-460a-bfa3-ad7d8996ee08",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/treelearner/voting_parallel_tree_learner.cpp"
                },
                "region": {
                  "startLine": 228,
                  "startColumn": 13,
                  "endLine": 228,
                  "endColumn": 204,
                  "charOffset": 10122,
                  "charLength": 191,
                  "snippet": {
                    "text": "memcpy(input_buffer_.data() + reduce_scatter_size_, this->larger_leaf_histogram_array_[inner_feature_index].RawData(), this->larger_leaf_histogram_array_[inner_feature_index].SizeOfHistgram()",
                    "rendered": {
                      "text": "memcpy(input_buffer_.data() + reduce_scatter_size_, this->larger_leaf_histogram_array_[inner_feature_index].RawData(), this->larger_leaf_histogram_array_[inner_feature_index].SizeOfHistgram()",
                      "markdown": "`memcpy(input_buffer_.data() + reduce_scatter_size_, this->larger_leaf_histogram_array_[inner_feature_index].RawData(), this->larger_leaf_histogram_array_[inner_feature_index].SizeOfHistgram()`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/treelearner/voting_parallel_tree_learner.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 10122,
                        "charLength": 191
                      },
                      "insertedContent": {
                        "text": "memcpy_s(input_buffer_.data() + reduce_scatter_size_, <size of input_buffer_.data() + reduce_scatter_size_>,  this->larger_leaf_histogram_array_[inner_feature_index].RawData(),  this->larger_leaf_histogram_array_[inner_feature_index].SizeOfHistgram()"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-8af4ef58-174d-4670-b361-33f4e66a3684",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/treelearner/voting_parallel_tree_learner.cpp"
                },
                "region": {
                  "startLine": 119,
                  "startColumn": 7,
                  "endLine": 119,
                  "endColumn": 74,
                  "charOffset": 5070,
                  "charLength": 67,
                  "snippet": {
                    "text": "memcpy(reinterpret_cast<void*>(&data), output_buffer_.data(), size)",
                    "rendered": {
                      "text": "memcpy(reinterpret_cast<void*>(&data), output_buffer_.data(), size)",
                      "markdown": "`memcpy(reinterpret_cast<void*>(&data), output_buffer_.data(), size)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/treelearner/voting_parallel_tree_learner.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 5070,
                        "charLength": 67
                      },
                      "insertedContent": {
                        "text": "memcpy_s(reinterpret_cast<void*>(&data), <size of reinterpret_cast<void*>(&data)>,  output_buffer_.data(),  size)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-afae2f34-8ea9-4884-b541-e8802a8b243f",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/treelearner/voting_parallel_tree_learner.cpp"
                },
                "region": {
                  "startLine": 210,
                  "startColumn": 13,
                  "endLine": 210,
                  "endColumn": 206,
                  "charOffset": 9123,
                  "charLength": 193,
                  "snippet": {
                    "text": "memcpy(input_buffer_.data() + reduce_scatter_size_, this->smaller_leaf_histogram_array_[inner_feature_index].RawData(), this->smaller_leaf_histogram_array_[inner_feature_index].SizeOfHistgram()",
                    "rendered": {
                      "text": "memcpy(input_buffer_.data() + reduce_scatter_size_, this->smaller_leaf_histogram_array_[inner_feature_index].RawData(), this->smaller_leaf_histogram_array_[inner_feature_index].SizeOfHistgram()",
                      "markdown": "`memcpy(input_buffer_.data() + reduce_scatter_size_, this->smaller_leaf_histogram_array_[inner_feature_index].RawData(), this->smaller_leaf_histogram_array_[inner_feature_index].SizeOfHistgram()`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/treelearner/voting_parallel_tree_learner.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 9123,
                        "charLength": 193
                      },
                      "insertedContent": {
                        "text": "memcpy_s(input_buffer_.data() + reduce_scatter_size_, <size of input_buffer_.data() + reduce_scatter_size_>,  this->smaller_leaf_histogram_array_[inner_feature_index].RawData(),  this->smaller_leaf_histogram_array_[inner_feature_index].SizeOfHistgram()"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-88c82fab-f8e2-451f-8d16-0619d70b810b",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/treelearner/voting_parallel_tree_learner.cpp"
                },
                "region": {
                  "startLine": 101,
                  "startColumn": 7,
                  "endLine": 101,
                  "endColumn": 48,
                  "charOffset": 4231,
                  "charLength": 41,
                  "snippet": {
                    "text": "memcpy(input_buffer_.data(), &data, size)",
                    "rendered": {
                      "text": "memcpy(input_buffer_.data(), &data, size)",
                      "markdown": "`memcpy(input_buffer_.data(), &data, size)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/treelearner/voting_parallel_tree_learner.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 4231,
                        "charLength": 41
                      },
                      "insertedContent": {
                        "text": "memcpy_s(input_buffer_.data(), <size of input_buffer_.data()>,  &data,  size)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-99666e4f-6ce8-4d8f-9b89-68aa39ab65c2",
          "kind": "fail",
          "level": "error",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/network/socket_wrapper.hpp"
                },
                "region": {
                  "startLine": 67,
                  "startColumn": 2,
                  "endLine": 67,
                  "endColumn": 46,
                  "charOffset": 1362,
                  "charLength": 44,
                  "snippet": {
                    "text": "strncpy(src_copy, src, INET6_ADDRSTRLEN + 1)",
                    "rendered": {
                      "text": "strncpy(src_copy, src, INET6_ADDRSTRLEN + 1)",
                      "markdown": "`strncpy(src_copy, src, INET6_ADDRSTRLEN + 1)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "strncpy is dangerous, as if the source contains 'n' or more characters, it will not null terminate the destination."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/network/socket_wrapper.hpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1362,
                        "charLength": 44
                      },
                      "insertedContent": {
                        "text": "strcpy_s(src_copy,  INET6_ADDRSTRLEN + 1,  src)"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "strncpy is dangerous, as if the source contains 'n' or more characters, it will not null terminate the destination."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/network/socket_wrapper.hpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1362,
                        "charLength": 44
                      },
                      "insertedContent": {
                        "text": "strlcpy(src_copy,  src,  INET6_ADDRSTRLEN + 1)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "glog-61041f33-a8d5-4823-975b-ff9dfca40fdc",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/treelearner/data_parallel_tree_learner.cpp"
                },
                "region": {
                  "startLine": 275,
                  "startColumn": 11,
                  "endLine": 277,
                  "endColumn": 83,
                  "charOffset": 12883,
                  "charLength": 231,
                  "snippet": {
                    "text": "memcpy(input_buffer_.data() + buffer_write_start_pos_[feature_index],\n                this->smaller_leaf_histogram_array_[feature_index].RawData(),\n                this->smaller_leaf_histogram_array_[feature_index].SizeOfHistgram()",
                    "rendered": {
                      "text": "memcpy(input_buffer_.data() + buffer_write_start_pos_[feature_index],\n                this->smaller_leaf_histogram_array_[feature_index].RawData(),\n                this->smaller_leaf_histogram_array_[feature_index].SizeOfHistgram()",
                      "markdown": "`memcpy(input_buffer_.data() + buffer_write_start_pos_[feature_index],\n                this->smaller_leaf_histogram_array_[feature_index].RawData(),\n                this->smaller_leaf_histogram_array_[feature_index].SizeOfHistgram()`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/treelearner/data_parallel_tree_learner.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 12883,
                        "charLength": 231
                      },
                      "insertedContent": {
                        "text": "memcpy_s(input_buffer_.data() + buffer_write_start_pos_[feature_index], <size of input_buffer_.data() + buffer_write_start_pos_[feature_index]>, \n                this->smaller_leaf_histogram_array_[feature_index].RawData(), \n                this->smaller_leaf_histogram_array_[feature_index].SizeOfHistgram()"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-0e54342f-b076-478f-9730-1372b4c7c064",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/treelearner/data_parallel_tree_learner.cpp"
                },
                "region": {
                  "startLine": 261,
                  "startColumn": 13,
                  "endLine": 263,
                  "endColumn": 92,
                  "charOffset": 12072,
                  "charLength": 255,
                  "snippet": {
                    "text": "memcpy(input_buffer_.data() + buffer_write_start_pos_int16_[feature_index],\n                    this->smaller_leaf_histogram_array_[feature_index].RawDataInt16(),\n                    this->smaller_leaf_histogram_array_[feature_index].SizeOfInt16Histgram()",
                    "rendered": {
                      "text": "memcpy(input_buffer_.data() + buffer_write_start_pos_int16_[feature_index],\n                    this->smaller_leaf_histogram_array_[feature_index].RawDataInt16(),\n                    this->smaller_leaf_histogram_array_[feature_index].SizeOfInt16Histgram()",
                      "markdown": "`memcpy(input_buffer_.data() + buffer_write_start_pos_int16_[feature_index],\n                    this->smaller_leaf_histogram_array_[feature_index].RawDataInt16(),\n                    this->smaller_leaf_histogram_array_[feature_index].SizeOfInt16Histgram()`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/treelearner/data_parallel_tree_learner.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 12072,
                        "charLength": 255
                      },
                      "insertedContent": {
                        "text": "memcpy_s(input_buffer_.data() + buffer_write_start_pos_int16_[feature_index], <size of input_buffer_.data() + buffer_write_start_pos_int16_[feature_index]>, \n                    this->smaller_leaf_histogram_array_[feature_index].RawDataInt16(), \n                    this->smaller_leaf_histogram_array_[feature_index].SizeOfInt16Histgram()"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-db6a37c2-02e7-4014-9832-c74ff33dda8e",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/treelearner/data_parallel_tree_learner.cpp"
                },
                "region": {
                  "startLine": 266,
                  "startColumn": 15,
                  "endLine": 268,
                  "endColumn": 94,
                  "charOffset": 12409,
                  "charLength": 253,
                  "snippet": {
                    "text": "memcpy(input_buffer_.data() + buffer_write_start_pos_[feature_index],\n                      this->smaller_leaf_histogram_array_[feature_index].RawDataInt32(),\n                      this->smaller_leaf_histogram_array_[feature_index].SizeOfInt32Histgram()",
                    "rendered": {
                      "text": "memcpy(input_buffer_.data() + buffer_write_start_pos_[feature_index],\n                      this->smaller_leaf_histogram_array_[feature_index].RawDataInt32(),\n                      this->smaller_leaf_histogram_array_[feature_index].SizeOfInt32Histgram()",
                      "markdown": "`memcpy(input_buffer_.data() + buffer_write_start_pos_[feature_index],\n                      this->smaller_leaf_histogram_array_[feature_index].RawDataInt32(),\n                      this->smaller_leaf_histogram_array_[feature_index].SizeOfInt32Histgram()`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/treelearner/data_parallel_tree_learner.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 12409,
                        "charLength": 253
                      },
                      "insertedContent": {
                        "text": "memcpy_s(input_buffer_.data() + buffer_write_start_pos_[feature_index], <size of input_buffer_.data() + buffer_write_start_pos_[feature_index]>, \n                      this->smaller_leaf_histogram_array_[feature_index].RawDataInt32(), \n                      this->smaller_leaf_histogram_array_[feature_index].SizeOfInt32Histgram()"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-f59a125c-ebd6-4268-b68c-47f9a822fad5",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/treelearner/data_parallel_tree_learner.cpp"
                },
                "region": {
                  "startLine": 214,
                  "startColumn": 9,
                  "endLine": 214,
                  "endColumn": 76,
                  "charOffset": 9220,
                  "charLength": 67,
                  "snippet": {
                    "text": "memcpy(reinterpret_cast<void*>(&data), output_buffer_.data(), size)",
                    "rendered": {
                      "text": "memcpy(reinterpret_cast<void*>(&data), output_buffer_.data(), size)",
                      "markdown": "`memcpy(reinterpret_cast<void*>(&data), output_buffer_.data(), size)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/treelearner/data_parallel_tree_learner.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 9220,
                        "charLength": 67
                      },
                      "insertedContent": {
                        "text": "memcpy_s(reinterpret_cast<void*>(&data), <size of reinterpret_cast<void*>(&data)>,  output_buffer_.data(),  size)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-4ee44046-642a-4af0-b9a9-233265a8f880",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/treelearner/data_parallel_tree_learner.cpp"
                },
                "region": {
                  "startLine": 196,
                  "startColumn": 9,
                  "endLine": 196,
                  "endColumn": 50,
                  "charOffset": 8307,
                  "charLength": 41,
                  "snippet": {
                    "text": "memcpy(input_buffer_.data(), &data, size)",
                    "rendered": {
                      "text": "memcpy(input_buffer_.data(), &data, size)",
                      "markdown": "`memcpy(input_buffer_.data(), &data, size)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/treelearner/data_parallel_tree_learner.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 8307,
                        "charLength": 41
                      },
                      "insertedContent": {
                        "text": "memcpy_s(input_buffer_.data(), <size of input_buffer_.data()>,  &data,  size)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-d7474f4f-d16b-4a16-8231-c546877372ec",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/treelearner/data_parallel_tree_learner.cpp"
                },
                "region": {
                  "startLine": 184,
                  "startColumn": 9,
                  "endLine": 184,
                  "endColumn": 76,
                  "charOffset": 7533,
                  "charLength": 67,
                  "snippet": {
                    "text": "memcpy(reinterpret_cast<void*>(&data), output_buffer_.data(), size)",
                    "rendered": {
                      "text": "memcpy(reinterpret_cast<void*>(&data), output_buffer_.data(), size)",
                      "markdown": "`memcpy(reinterpret_cast<void*>(&data), output_buffer_.data(), size)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/treelearner/data_parallel_tree_learner.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 7533,
                        "charLength": 67
                      },
                      "insertedContent": {
                        "text": "memcpy_s(reinterpret_cast<void*>(&data), <size of reinterpret_cast<void*>(&data)>,  output_buffer_.data(),  size)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-487817a4-8da0-4c49-84a9-586da1d60477",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/treelearner/data_parallel_tree_learner.cpp"
                },
                "region": {
                  "startLine": 165,
                  "startColumn": 9,
                  "endLine": 165,
                  "endColumn": 50,
                  "charOffset": 6511,
                  "charLength": 41,
                  "snippet": {
                    "text": "memcpy(input_buffer_.data(), &data, size)",
                    "rendered": {
                      "text": "memcpy(input_buffer_.data(), &data, size)",
                      "markdown": "`memcpy(input_buffer_.data(), &data, size)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/treelearner/data_parallel_tree_learner.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 6511,
                        "charLength": 41
                      },
                      "insertedContent": {
                        "text": "memcpy_s(input_buffer_.data(), <size of input_buffer_.data()>,  &data,  size)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-e2cf149d-0958-4b2b-ba82-64963750aae0",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/network/network.cpp"
                },
                "region": {
                  "startLine": 317,
                  "startColumn": 7,
                  "endLine": 317,
                  "endColumn": 67,
                  "charOffset": 13587,
                  "charLength": 60,
                  "snippet": {
                    "text": "memcpy(output, input + block_start[rank_], block_len[rank_])",
                    "rendered": {
                      "text": "memcpy(output, input + block_start[rank_], block_len[rank_])",
                      "markdown": "`memcpy(output, input + block_start[rank_], block_len[rank_])`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/network/network.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 13587,
                        "charLength": 60
                      },
                      "insertedContent": {
                        "text": "memcpy_s(output, <size of output>,  input + block_start[rank_],  block_len[rank_])"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-f7ccb860-1420-49c8-bcda-71f84512d56d",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/network/network.cpp"
                },
                "region": {
                  "startLine": 218,
                  "startColumn": 7,
                  "endLine": 218,
                  "endColumn": 67,
                  "charOffset": 8552,
                  "charLength": 60,
                  "snippet": {
                    "text": "memcpy(output + block_start[rank_], input, block_len[rank_])",
                    "rendered": {
                      "text": "memcpy(output + block_start[rank_], input, block_len[rank_])",
                      "markdown": "`memcpy(output + block_start[rank_], input, block_len[rank_])`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/network/network.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 8552,
                        "charLength": 60
                      },
                      "insertedContent": {
                        "text": "memcpy_s(output + block_start[rank_], <size of output + block_start[rank_]>,  input,  block_len[rank_])"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-8be0c0b6-6f44-4198-aec7-4a800a485070",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/network/network.cpp"
                },
                "region": {
                  "startLine": 300,
                  "startColumn": 7,
                  "endLine": 300,
                  "endColumn": 67,
                  "charOffset": 12637,
                  "charLength": 60,
                  "snippet": {
                    "text": "memcpy(output, input + block_start[rank_], block_len[rank_])",
                    "rendered": {
                      "text": "memcpy(output, input + block_start[rank_], block_len[rank_])",
                      "markdown": "`memcpy(output, input + block_start[rank_], block_len[rank_])`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/network/network.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 12637,
                        "charLength": 60
                      },
                      "insertedContent": {
                        "text": "memcpy_s(output, <size of output>,  input + block_start[rank_],  block_len[rank_])"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-081e1fbc-f40b-4fb6-83f1-6283ef0afebf",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/network/network.cpp"
                },
                "region": {
                  "startLine": 190,
                  "startColumn": 7,
                  "endLine": 190,
                  "endColumn": 67,
                  "charOffset": 7466,
                  "charLength": 60,
                  "snippet": {
                    "text": "memcpy(output + block_start[rank_], input, block_len[rank_])",
                    "rendered": {
                      "text": "memcpy(output + block_start[rank_], input, block_len[rank_])",
                      "markdown": "`memcpy(output + block_start[rank_], input, block_len[rank_])`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/network/network.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 7466,
                        "charLength": 60
                      },
                      "insertedContent": {
                        "text": "memcpy_s(output + block_start[rank_], <size of output + block_start[rank_]>,  input,  block_len[rank_])"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-8122641a-6bf2-481a-9542-d03ba1e017af",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/network/network.cpp"
                },
                "region": {
                  "startLine": 159,
                  "startColumn": 7,
                  "endLine": 159,
                  "endColumn": 46,
                  "charOffset": 6153,
                  "charLength": 39,
                  "snippet": {
                    "text": "memcpy(output, input, block_len[rank_])",
                    "rendered": {
                      "text": "memcpy(output, input, block_len[rank_])",
                      "markdown": "`memcpy(output, input, block_len[rank_])`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/network/network.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 6153,
                        "charLength": 39
                      },
                      "insertedContent": {
                        "text": "memcpy_s(output, <size of output>,  input,  block_len[rank_])"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-066a4702-00bb-4a91-8ccb-d53383960815",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/network/network.cpp"
                },
                "region": {
                  "startLine": 118,
                  "startColumn": 7,
                  "endLine": 118,
                  "endColumn": 49,
                  "charOffset": 4471,
                  "charLength": 42,
                  "snippet": {
                    "text": "memcpy(output, buffer_.data(), input_size)",
                    "rendered": {
                      "text": "memcpy(output, buffer_.data(), input_size)",
                      "markdown": "`memcpy(output, buffer_.data(), input_size)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/network/network.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 4471,
                        "charLength": 42
                      },
                      "insertedContent": {
                        "text": "memcpy_s(output, <size of output>,  buffer_.data(),  input_size)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-1d00e75b-f1cf-49b5-ac55-44d93da24641",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/boosting/gbdt_model_text.cpp"
                },
                "region": {
                  "startLine": 442,
                  "startColumn": 53,
                  "endLine": 442,
                  "endColumn": 84,
                  "charOffset": 17636,
                  "charLength": 31,
                  "snippet": {
                    "text": "strlen(\"monotone_constraints=\")",
                    "rendered": {
                      "text": "strlen(\"monotone_constraints=\")",
                      "markdown": "`strlen(\"monotone_constraints=\")`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/boosting/gbdt_model_text.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 17636,
                        "charLength": 31
                      },
                      "insertedContent": {
                        "text": "strlen_s(\"monotone_constraints=\", <size of \"monotone_constraints=\">)"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/boosting/gbdt_model_text.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 17636,
                        "charLength": 31
                      },
                      "insertedContent": {
                        "text": "strnlen(\"monotone_constraints=\", <size of \"monotone_constraints=\">)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-a5fc6c31-ca2b-48c3-95e6-0a23f92ff4ef",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/boosting/gbdt_model_text.cpp"
                },
                "region": {
                  "startLine": 440,
                  "startColumn": 53,
                  "endLine": 440,
                  "endColumn": 77,
                  "charOffset": 17498,
                  "charLength": 24,
                  "snippet": {
                    "text": "strlen(\"feature_names=\")",
                    "rendered": {
                      "text": "strlen(\"feature_names=\")",
                      "markdown": "`strlen(\"feature_names=\")`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/boosting/gbdt_model_text.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 17498,
                        "charLength": 24
                      },
                      "insertedContent": {
                        "text": "strlen_s(\"feature_names=\", <size of \"feature_names=\">)"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/boosting/gbdt_model_text.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 17498,
                        "charLength": 24
                      },
                      "insertedContent": {
                        "text": "strnlen(\"feature_names=\", <size of \"feature_names=\">)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-259188b2-c4d8-4918-9c2f-2e6a0c5e4c2d",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/treelearner/split_info.hpp"
                },
                "region": {
                  "startLine": 229,
                  "startColumn": 9,
                  "endLine": 229,
                  "endColumn": 43,
                  "charOffset": 8247,
                  "charLength": 34,
                  "snippet": {
                    "text": "memcpy(&gain, buffer, sizeof(gain)",
                    "rendered": {
                      "text": "memcpy(&gain, buffer, sizeof(gain)",
                      "markdown": "`memcpy(&gain, buffer, sizeof(gain)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/treelearner/split_info.hpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 8247,
                        "charLength": 34
                      },
                      "insertedContent": {
                        "text": "memcpy_s(&gain, <size of &gain>,  buffer,  sizeof(gain)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-c9ac0ce2-5e5c-4467-bd50-8aa9bdb0a2a1",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/treelearner/split_info.hpp"
                },
                "region": {
                  "startLine": 227,
                  "startColumn": 9,
                  "endLine": 227,
                  "endColumn": 57,
                  "charOffset": 8152,
                  "charLength": 48,
                  "snippet": {
                    "text": "memcpy(&right_count, buffer, sizeof(right_count)",
                    "rendered": {
                      "text": "memcpy(&right_count, buffer, sizeof(right_count)",
                      "markdown": "`memcpy(&right_count, buffer, sizeof(right_count)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/treelearner/split_info.hpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 8152,
                        "charLength": 48
                      },
                      "insertedContent": {
                        "text": "memcpy_s(&right_count, <size of &right_count>,  buffer,  sizeof(right_count)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-e5192089-f4b1-4c5e-ab2e-1618760a902c",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/treelearner/split_info.hpp"
                },
                "region": {
                  "startLine": 225,
                  "startColumn": 9,
                  "endLine": 225,
                  "endColumn": 55,
                  "charOffset": 8060,
                  "charLength": 46,
                  "snippet": {
                    "text": "memcpy(&left_count, buffer, sizeof(left_count)",
                    "rendered": {
                      "text": "memcpy(&left_count, buffer, sizeof(left_count)",
                      "markdown": "`memcpy(&left_count, buffer, sizeof(left_count)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/treelearner/split_info.hpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 8060,
                        "charLength": 46
                      },
                      "insertedContent": {
                        "text": "memcpy_s(&left_count, <size of &left_count>,  buffer,  sizeof(left_count)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-8460813f-41e0-4122-a2e0-8c763e05c210",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/treelearner/split_info.hpp"
                },
                "region": {
                  "startLine": 223,
                  "startColumn": 9,
                  "endLine": 223,
                  "endColumn": 49,
                  "charOffset": 7977,
                  "charLength": 40,
                  "snippet": {
                    "text": "memcpy(&feature, buffer, sizeof(feature)",
                    "rendered": {
                      "text": "memcpy(&feature, buffer, sizeof(feature)",
                      "markdown": "`memcpy(&feature, buffer, sizeof(feature)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/treelearner/split_info.hpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 7977,
                        "charLength": 40
                      },
                      "insertedContent": {
                        "text": "memcpy_s(&feature, <size of &feature>,  buffer,  sizeof(feature)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-e7aa1a2e-4801-4106-917e-3ac1765dc189",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/treelearner/split_info.hpp"
                },
                "region": {
                  "startLine": 129,
                  "startColumn": 9,
                  "endLine": 129,
                  "endColumn": 62,
                  "charOffset": 5521,
                  "charLength": 53,
                  "snippet": {
                    "text": "memcpy(cat_threshold.data(), buffer, sizeof(uint32_t)",
                    "rendered": {
                      "text": "memcpy(cat_threshold.data(), buffer, sizeof(uint32_t)",
                      "markdown": "`memcpy(cat_threshold.data(), buffer, sizeof(uint32_t)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/treelearner/split_info.hpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 5521,
                        "charLength": 53
                      },
                      "insertedContent": {
                        "text": "memcpy_s(cat_threshold.data(), <size of cat_threshold.data()>,  buffer,  sizeof(uint32_t)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-7e211896-33b8-476a-a21b-a125a9fe47b3",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/treelearner/split_info.hpp"
                },
                "region": {
                  "startLine": 126,
                  "startColumn": 9,
                  "endLine": 126,
                  "endColumn": 69,
                  "charOffset": 5363,
                  "charLength": 60,
                  "snippet": {
                    "text": "memcpy(&num_cat_threshold, buffer, sizeof(num_cat_threshold)",
                    "rendered": {
                      "text": "memcpy(&num_cat_threshold, buffer, sizeof(num_cat_threshold)",
                      "markdown": "`memcpy(&num_cat_threshold, buffer, sizeof(num_cat_threshold)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/treelearner/split_info.hpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 5363,
                        "charLength": 60
                      },
                      "insertedContent": {
                        "text": "memcpy_s(&num_cat_threshold, <size of &num_cat_threshold>,  buffer,  sizeof(num_cat_threshold)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-7b87963e-9aeb-4e34-b704-791b7faab094",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/treelearner/split_info.hpp"
                },
                "region": {
                  "startLine": 124,
                  "startColumn": 9,
                  "endLine": 124,
                  "endColumn": 61,
                  "charOffset": 5262,
                  "charLength": 52,
                  "snippet": {
                    "text": "memcpy(&monotone_type, buffer, sizeof(monotone_type)",
                    "rendered": {
                      "text": "memcpy(&monotone_type, buffer, sizeof(monotone_type)",
                      "markdown": "`memcpy(&monotone_type, buffer, sizeof(monotone_type)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/treelearner/split_info.hpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 5262,
                        "charLength": 52
                      },
                      "insertedContent": {
                        "text": "memcpy_s(&monotone_type, <size of &monotone_type>,  buffer,  sizeof(monotone_type)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-70e8c51b-a4a9-4999-ad95-25490ab8313c",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/treelearner/split_info.hpp"
                },
                "region": {
                  "startLine": 122,
                  "startColumn": 9,
                  "endLine": 122,
                  "endColumn": 59,
                  "charOffset": 5164,
                  "charLength": 50,
                  "snippet": {
                    "text": "memcpy(&default_left, buffer, sizeof(default_left)",
                    "rendered": {
                      "text": "memcpy(&default_left, buffer, sizeof(default_left)",
                      "markdown": "`memcpy(&default_left, buffer, sizeof(default_left)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/treelearner/split_info.hpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 5164,
                        "charLength": 50
                      },
                      "insertedContent": {
                        "text": "memcpy_s(&default_left, <size of &default_left>,  buffer,  sizeof(default_left)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-baaaaf77-9af1-4461-abe2-89bd230d767b",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/treelearner/split_info.hpp"
                },
                "region": {
                  "startLine": 120,
                  "startColumn": 9,
                  "endLine": 120,
                  "endColumn": 95,
                  "charOffset": 5012,
                  "charLength": 86,
                  "snippet": {
                    "text": "memcpy(&right_sum_gradient_and_hessian, buffer, sizeof(right_sum_gradient_and_hessian)",
                    "rendered": {
                      "text": "memcpy(&right_sum_gradient_and_hessian, buffer, sizeof(right_sum_gradient_and_hessian)",
                      "markdown": "`memcpy(&right_sum_gradient_and_hessian, buffer, sizeof(right_sum_gradient_and_hessian)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/treelearner/split_info.hpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 5012,
                        "charLength": 86
                      },
                      "insertedContent": {
                        "text": "memcpy_s(&right_sum_gradient_and_hessian, <size of &right_sum_gradient_and_hessian>,  buffer,  sizeof(right_sum_gradient_and_hessian)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-0c061f7c-243f-4483-9c35-b7c2b7933ec8",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/treelearner/split_info.hpp"
                },
                "region": {
                  "startLine": 118,
                  "startColumn": 9,
                  "endLine": 118,
                  "endColumn": 69,
                  "charOffset": 4899,
                  "charLength": 60,
                  "snippet": {
                    "text": "memcpy(&right_sum_hessian, buffer, sizeof(right_sum_hessian)",
                    "rendered": {
                      "text": "memcpy(&right_sum_hessian, buffer, sizeof(right_sum_hessian)",
                      "markdown": "`memcpy(&right_sum_hessian, buffer, sizeof(right_sum_hessian)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/treelearner/split_info.hpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 4899,
                        "charLength": 60
                      },
                      "insertedContent": {
                        "text": "memcpy_s(&right_sum_hessian, <size of &right_sum_hessian>,  buffer,  sizeof(right_sum_hessian)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-45ae19ed-731f-45be-993b-13c3c213a988",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/treelearner/split_info.hpp"
                },
                "region": {
                  "startLine": 116,
                  "startColumn": 9,
                  "endLine": 116,
                  "endColumn": 71,
                  "charOffset": 4783,
                  "charLength": 62,
                  "snippet": {
                    "text": "memcpy(&right_sum_gradient, buffer, sizeof(right_sum_gradient)",
                    "rendered": {
                      "text": "memcpy(&right_sum_gradient, buffer, sizeof(right_sum_gradient)",
                      "markdown": "`memcpy(&right_sum_gradient, buffer, sizeof(right_sum_gradient)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/treelearner/split_info.hpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 4783,
                        "charLength": 62
                      },
                      "insertedContent": {
                        "text": "memcpy_s(&right_sum_gradient, <size of &right_sum_gradient>,  buffer,  sizeof(right_sum_gradient)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-47001fd9-90e7-4bf6-af5d-572962883af1",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/treelearner/split_info.hpp"
                },
                "region": {
                  "startLine": 114,
                  "startColumn": 9,
                  "endLine": 114,
                  "endColumn": 93,
                  "charOffset": 4634,
                  "charLength": 84,
                  "snippet": {
                    "text": "memcpy(&left_sum_gradient_and_hessian, buffer, sizeof(left_sum_gradient_and_hessian)",
                    "rendered": {
                      "text": "memcpy(&left_sum_gradient_and_hessian, buffer, sizeof(left_sum_gradient_and_hessian)",
                      "markdown": "`memcpy(&left_sum_gradient_and_hessian, buffer, sizeof(left_sum_gradient_and_hessian)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/treelearner/split_info.hpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 4634,
                        "charLength": 84
                      },
                      "insertedContent": {
                        "text": "memcpy_s(&left_sum_gradient_and_hessian, <size of &left_sum_gradient_and_hessian>,  buffer,  sizeof(left_sum_gradient_and_hessian)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-8fc3e4c9-79b4-4f27-aa83-8639dfb47a10",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/treelearner/split_info.hpp"
                },
                "region": {
                  "startLine": 112,
                  "startColumn": 9,
                  "endLine": 112,
                  "endColumn": 67,
                  "charOffset": 4524,
                  "charLength": 58,
                  "snippet": {
                    "text": "memcpy(&left_sum_hessian, buffer, sizeof(left_sum_hessian)",
                    "rendered": {
                      "text": "memcpy(&left_sum_hessian, buffer, sizeof(left_sum_hessian)",
                      "markdown": "`memcpy(&left_sum_hessian, buffer, sizeof(left_sum_hessian)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/treelearner/split_info.hpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 4524,
                        "charLength": 58
                      },
                      "insertedContent": {
                        "text": "memcpy_s(&left_sum_hessian, <size of &left_sum_hessian>,  buffer,  sizeof(left_sum_hessian)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-af5b8f22-4b8c-4963-bcf6-daead3f56a14",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/treelearner/split_info.hpp"
                },
                "region": {
                  "startLine": 110,
                  "startColumn": 9,
                  "endLine": 110,
                  "endColumn": 69,
                  "charOffset": 4411,
                  "charLength": 60,
                  "snippet": {
                    "text": "memcpy(&left_sum_gradient, buffer, sizeof(left_sum_gradient)",
                    "rendered": {
                      "text": "memcpy(&left_sum_gradient, buffer, sizeof(left_sum_gradient)",
                      "markdown": "`memcpy(&left_sum_gradient, buffer, sizeof(left_sum_gradient)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/treelearner/split_info.hpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 4411,
                        "charLength": 60
                      },
                      "insertedContent": {
                        "text": "memcpy_s(&left_sum_gradient, <size of &left_sum_gradient>,  buffer,  sizeof(left_sum_gradient)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-5135033f-f870-4bb1-a43a-f08d9f292e44",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/treelearner/split_info.hpp"
                },
                "region": {
                  "startLine": 108,
                  "startColumn": 9,
                  "endLine": 108,
                  "endColumn": 59,
                  "charOffset": 4313,
                  "charLength": 50,
                  "snippet": {
                    "text": "memcpy(&right_output, buffer, sizeof(right_output)",
                    "rendered": {
                      "text": "memcpy(&right_output, buffer, sizeof(right_output)",
                      "markdown": "`memcpy(&right_output, buffer, sizeof(right_output)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/treelearner/split_info.hpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 4313,
                        "charLength": 50
                      },
                      "insertedContent": {
                        "text": "memcpy_s(&right_output, <size of &right_output>,  buffer,  sizeof(right_output)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-2c12a414-60e2-4768-8370-460367e17c0d",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/treelearner/split_info.hpp"
                },
                "region": {
                  "startLine": 106,
                  "startColumn": 9,
                  "endLine": 106,
                  "endColumn": 57,
                  "charOffset": 4218,
                  "charLength": 48,
                  "snippet": {
                    "text": "memcpy(&left_output, buffer, sizeof(left_output)",
                    "rendered": {
                      "text": "memcpy(&left_output, buffer, sizeof(left_output)",
                      "markdown": "`memcpy(&left_output, buffer, sizeof(left_output)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/treelearner/split_info.hpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 4218,
                        "charLength": 48
                      },
                      "insertedContent": {
                        "text": "memcpy_s(&left_output, <size of &left_output>,  buffer,  sizeof(left_output)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-184fdb8b-6d98-4afb-b3e4-878af88eea22",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/treelearner/split_info.hpp"
                },
                "region": {
                  "startLine": 104,
                  "startColumn": 9,
                  "endLine": 104,
                  "endColumn": 53,
                  "charOffset": 4129,
                  "charLength": 44,
                  "snippet": {
                    "text": "memcpy(&threshold, buffer, sizeof(threshold)",
                    "rendered": {
                      "text": "memcpy(&threshold, buffer, sizeof(threshold)",
                      "markdown": "`memcpy(&threshold, buffer, sizeof(threshold)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/treelearner/split_info.hpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 4129,
                        "charLength": 44
                      },
                      "insertedContent": {
                        "text": "memcpy_s(&threshold, <size of &threshold>,  buffer,  sizeof(threshold)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-1108eb4f-090a-46f9-a587-dbd13345df1d",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/treelearner/split_info.hpp"
                },
                "region": {
                  "startLine": 102,
                  "startColumn": 9,
                  "endLine": 102,
                  "endColumn": 43,
                  "charOffset": 4055,
                  "charLength": 34,
                  "snippet": {
                    "text": "memcpy(&gain, buffer, sizeof(gain)",
                    "rendered": {
                      "text": "memcpy(&gain, buffer, sizeof(gain)",
                      "markdown": "`memcpy(&gain, buffer, sizeof(gain)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/treelearner/split_info.hpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 4055,
                        "charLength": 34
                      },
                      "insertedContent": {
                        "text": "memcpy_s(&gain, <size of &gain>,  buffer,  sizeof(gain)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-0a9e6c6e-52b5-49c9-a202-cbc61b04cfb1",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/treelearner/split_info.hpp"
                },
                "region": {
                  "startLine": 100,
                  "startColumn": 9,
                  "endLine": 100,
                  "endColumn": 57,
                  "charOffset": 3960,
                  "charLength": 48,
                  "snippet": {
                    "text": "memcpy(&right_count, buffer, sizeof(right_count)",
                    "rendered": {
                      "text": "memcpy(&right_count, buffer, sizeof(right_count)",
                      "markdown": "`memcpy(&right_count, buffer, sizeof(right_count)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/treelearner/split_info.hpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 3960,
                        "charLength": 48
                      },
                      "insertedContent": {
                        "text": "memcpy_s(&right_count, <size of &right_count>,  buffer,  sizeof(right_count)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-abbfc9b8-fb06-42fe-99a3-8edde8e74da4",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/treelearner/split_info.hpp"
                },
                "region": {
                  "startLine": 98,
                  "startColumn": 9,
                  "endLine": 98,
                  "endColumn": 55,
                  "charOffset": 3868,
                  "charLength": 46,
                  "snippet": {
                    "text": "memcpy(&left_count, buffer, sizeof(left_count)",
                    "rendered": {
                      "text": "memcpy(&left_count, buffer, sizeof(left_count)",
                      "markdown": "`memcpy(&left_count, buffer, sizeof(left_count)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/treelearner/split_info.hpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 3868,
                        "charLength": 46
                      },
                      "insertedContent": {
                        "text": "memcpy_s(&left_count, <size of &left_count>,  buffer,  sizeof(left_count)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-20c2a229-392f-41f5-9318-eba6eabb9fe7",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/treelearner/split_info.hpp"
                },
                "region": {
                  "startLine": 96,
                  "startColumn": 9,
                  "endLine": 96,
                  "endColumn": 49,
                  "charOffset": 3785,
                  "charLength": 40,
                  "snippet": {
                    "text": "memcpy(&feature, buffer, sizeof(feature)",
                    "rendered": {
                      "text": "memcpy(&feature, buffer, sizeof(feature)",
                      "markdown": "`memcpy(&feature, buffer, sizeof(feature)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/treelearner/split_info.hpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 3785,
                        "charLength": 40
                      },
                      "insertedContent": {
                        "text": "memcpy_s(&feature, <size of &feature>,  buffer,  sizeof(feature)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-3e514b31-e711-4321-bc72-b5396b33cbb0",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/treelearner/split_info.hpp"
                },
                "region": {
                  "startLine": 92,
                  "startColumn": 9,
                  "endLine": 92,
                  "endColumn": 62,
                  "charOffset": 3657,
                  "charLength": 53,
                  "snippet": {
                    "text": "memcpy(buffer, cat_threshold.data(), sizeof(uint32_t)",
                    "rendered": {
                      "text": "memcpy(buffer, cat_threshold.data(), sizeof(uint32_t)",
                      "markdown": "`memcpy(buffer, cat_threshold.data(), sizeof(uint32_t)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/treelearner/split_info.hpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 3657,
                        "charLength": 53
                      },
                      "insertedContent": {
                        "text": "memcpy_s(buffer, <size of buffer>,  cat_threshold.data(),  sizeof(uint32_t)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-66c95229-ec85-4170-aca8-9e2aaf2975d1",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/treelearner/split_info.hpp"
                },
                "region": {
                  "startLine": 90,
                  "startColumn": 9,
                  "endLine": 90,
                  "endColumn": 69,
                  "charOffset": 3544,
                  "charLength": 60,
                  "snippet": {
                    "text": "memcpy(buffer, &num_cat_threshold, sizeof(num_cat_threshold)",
                    "rendered": {
                      "text": "memcpy(buffer, &num_cat_threshold, sizeof(num_cat_threshold)",
                      "markdown": "`memcpy(buffer, &num_cat_threshold, sizeof(num_cat_threshold)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/treelearner/split_info.hpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 3544,
                        "charLength": 60
                      },
                      "insertedContent": {
                        "text": "memcpy_s(buffer, <size of buffer>,  &num_cat_threshold,  sizeof(num_cat_threshold)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-41d4bf38-a3cb-42c4-98b8-253528bb7522",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/treelearner/split_info.hpp"
                },
                "region": {
                  "startLine": 88,
                  "startColumn": 9,
                  "endLine": 88,
                  "endColumn": 61,
                  "charOffset": 3443,
                  "charLength": 52,
                  "snippet": {
                    "text": "memcpy(buffer, &monotone_type, sizeof(monotone_type)",
                    "rendered": {
                      "text": "memcpy(buffer, &monotone_type, sizeof(monotone_type)",
                      "markdown": "`memcpy(buffer, &monotone_type, sizeof(monotone_type)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/treelearner/split_info.hpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 3443,
                        "charLength": 52
                      },
                      "insertedContent": {
                        "text": "memcpy_s(buffer, <size of buffer>,  &monotone_type,  sizeof(monotone_type)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-271cd784-4de4-4e81-893a-ff9ffd89c0a8",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/treelearner/split_info.hpp"
                },
                "region": {
                  "startLine": 86,
                  "startColumn": 9,
                  "endLine": 86,
                  "endColumn": 59,
                  "charOffset": 3345,
                  "charLength": 50,
                  "snippet": {
                    "text": "memcpy(buffer, &default_left, sizeof(default_left)",
                    "rendered": {
                      "text": "memcpy(buffer, &default_left, sizeof(default_left)",
                      "markdown": "`memcpy(buffer, &default_left, sizeof(default_left)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/treelearner/split_info.hpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 3345,
                        "charLength": 50
                      },
                      "insertedContent": {
                        "text": "memcpy_s(buffer, <size of buffer>,  &default_left,  sizeof(default_left)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-0da2715b-46c1-4c5b-80ae-5f2320c13b94",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/treelearner/split_info.hpp"
                },
                "region": {
                  "startLine": 84,
                  "startColumn": 9,
                  "endLine": 84,
                  "endColumn": 95,
                  "charOffset": 3193,
                  "charLength": 86,
                  "snippet": {
                    "text": "memcpy(buffer, &right_sum_gradient_and_hessian, sizeof(right_sum_gradient_and_hessian)",
                    "rendered": {
                      "text": "memcpy(buffer, &right_sum_gradient_and_hessian, sizeof(right_sum_gradient_and_hessian)",
                      "markdown": "`memcpy(buffer, &right_sum_gradient_and_hessian, sizeof(right_sum_gradient_and_hessian)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/treelearner/split_info.hpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 3193,
                        "charLength": 86
                      },
                      "insertedContent": {
                        "text": "memcpy_s(buffer, <size of buffer>,  &right_sum_gradient_and_hessian,  sizeof(right_sum_gradient_and_hessian)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-4c273544-8102-4650-bd26-267e202d0f68",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/treelearner/split_info.hpp"
                },
                "region": {
                  "startLine": 82,
                  "startColumn": 9,
                  "endLine": 82,
                  "endColumn": 69,
                  "charOffset": 3080,
                  "charLength": 60,
                  "snippet": {
                    "text": "memcpy(buffer, &right_sum_hessian, sizeof(right_sum_hessian)",
                    "rendered": {
                      "text": "memcpy(buffer, &right_sum_hessian, sizeof(right_sum_hessian)",
                      "markdown": "`memcpy(buffer, &right_sum_hessian, sizeof(right_sum_hessian)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/treelearner/split_info.hpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 3080,
                        "charLength": 60
                      },
                      "insertedContent": {
                        "text": "memcpy_s(buffer, <size of buffer>,  &right_sum_hessian,  sizeof(right_sum_hessian)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-c2737df7-5b5f-4666-bfdb-d5ffeee16801",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/treelearner/split_info.hpp"
                },
                "region": {
                  "startLine": 80,
                  "startColumn": 9,
                  "endLine": 80,
                  "endColumn": 71,
                  "charOffset": 2964,
                  "charLength": 62,
                  "snippet": {
                    "text": "memcpy(buffer, &right_sum_gradient, sizeof(right_sum_gradient)",
                    "rendered": {
                      "text": "memcpy(buffer, &right_sum_gradient, sizeof(right_sum_gradient)",
                      "markdown": "`memcpy(buffer, &right_sum_gradient, sizeof(right_sum_gradient)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/treelearner/split_info.hpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2964,
                        "charLength": 62
                      },
                      "insertedContent": {
                        "text": "memcpy_s(buffer, <size of buffer>,  &right_sum_gradient,  sizeof(right_sum_gradient)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-daf72d9b-3a05-4704-b9d8-5a6c122ef891",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/treelearner/split_info.hpp"
                },
                "region": {
                  "startLine": 78,
                  "startColumn": 9,
                  "endLine": 78,
                  "endColumn": 93,
                  "charOffset": 2815,
                  "charLength": 84,
                  "snippet": {
                    "text": "memcpy(buffer, &left_sum_gradient_and_hessian, sizeof(left_sum_gradient_and_hessian)",
                    "rendered": {
                      "text": "memcpy(buffer, &left_sum_gradient_and_hessian, sizeof(left_sum_gradient_and_hessian)",
                      "markdown": "`memcpy(buffer, &left_sum_gradient_and_hessian, sizeof(left_sum_gradient_and_hessian)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/treelearner/split_info.hpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2815,
                        "charLength": 84
                      },
                      "insertedContent": {
                        "text": "memcpy_s(buffer, <size of buffer>,  &left_sum_gradient_and_hessian,  sizeof(left_sum_gradient_and_hessian)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-01a5386f-2eed-412b-be5c-609a14efa3d8",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/treelearner/split_info.hpp"
                },
                "region": {
                  "startLine": 76,
                  "startColumn": 9,
                  "endLine": 76,
                  "endColumn": 67,
                  "charOffset": 2705,
                  "charLength": 58,
                  "snippet": {
                    "text": "memcpy(buffer, &left_sum_hessian, sizeof(left_sum_hessian)",
                    "rendered": {
                      "text": "memcpy(buffer, &left_sum_hessian, sizeof(left_sum_hessian)",
                      "markdown": "`memcpy(buffer, &left_sum_hessian, sizeof(left_sum_hessian)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/treelearner/split_info.hpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2705,
                        "charLength": 58
                      },
                      "insertedContent": {
                        "text": "memcpy_s(buffer, <size of buffer>,  &left_sum_hessian,  sizeof(left_sum_hessian)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-669bb790-e89d-4b99-b83e-178cb12380a7",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/treelearner/split_info.hpp"
                },
                "region": {
                  "startLine": 74,
                  "startColumn": 9,
                  "endLine": 74,
                  "endColumn": 69,
                  "charOffset": 2592,
                  "charLength": 60,
                  "snippet": {
                    "text": "memcpy(buffer, &left_sum_gradient, sizeof(left_sum_gradient)",
                    "rendered": {
                      "text": "memcpy(buffer, &left_sum_gradient, sizeof(left_sum_gradient)",
                      "markdown": "`memcpy(buffer, &left_sum_gradient, sizeof(left_sum_gradient)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/treelearner/split_info.hpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2592,
                        "charLength": 60
                      },
                      "insertedContent": {
                        "text": "memcpy_s(buffer, <size of buffer>,  &left_sum_gradient,  sizeof(left_sum_gradient)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-da001985-2ce5-4f16-a683-226e796a91ee",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/treelearner/split_info.hpp"
                },
                "region": {
                  "startLine": 72,
                  "startColumn": 9,
                  "endLine": 72,
                  "endColumn": 59,
                  "charOffset": 2494,
                  "charLength": 50,
                  "snippet": {
                    "text": "memcpy(buffer, &right_output, sizeof(right_output)",
                    "rendered": {
                      "text": "memcpy(buffer, &right_output, sizeof(right_output)",
                      "markdown": "`memcpy(buffer, &right_output, sizeof(right_output)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/treelearner/split_info.hpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2494,
                        "charLength": 50
                      },
                      "insertedContent": {
                        "text": "memcpy_s(buffer, <size of buffer>,  &right_output,  sizeof(right_output)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-93854f5e-08c0-4f16-bd8d-44eed2fe19fa",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/treelearner/split_info.hpp"
                },
                "region": {
                  "startLine": 70,
                  "startColumn": 9,
                  "endLine": 70,
                  "endColumn": 57,
                  "charOffset": 2399,
                  "charLength": 48,
                  "snippet": {
                    "text": "memcpy(buffer, &left_output, sizeof(left_output)",
                    "rendered": {
                      "text": "memcpy(buffer, &left_output, sizeof(left_output)",
                      "markdown": "`memcpy(buffer, &left_output, sizeof(left_output)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/treelearner/split_info.hpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2399,
                        "charLength": 48
                      },
                      "insertedContent": {
                        "text": "memcpy_s(buffer, <size of buffer>,  &left_output,  sizeof(left_output)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-9c626ada-6651-49e9-a3d5-7b1887fb7a7e",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/treelearner/split_info.hpp"
                },
                "region": {
                  "startLine": 68,
                  "startColumn": 9,
                  "endLine": 68,
                  "endColumn": 53,
                  "charOffset": 2310,
                  "charLength": 44,
                  "snippet": {
                    "text": "memcpy(buffer, &threshold, sizeof(threshold)",
                    "rendered": {
                      "text": "memcpy(buffer, &threshold, sizeof(threshold)",
                      "markdown": "`memcpy(buffer, &threshold, sizeof(threshold)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/treelearner/split_info.hpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2310,
                        "charLength": 44
                      },
                      "insertedContent": {
                        "text": "memcpy_s(buffer, <size of buffer>,  &threshold,  sizeof(threshold)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-c5de89c1-3405-404f-8daf-3717f4dee296",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/treelearner/split_info.hpp"
                },
                "region": {
                  "startLine": 66,
                  "startColumn": 9,
                  "endLine": 66,
                  "endColumn": 43,
                  "charOffset": 2236,
                  "charLength": 34,
                  "snippet": {
                    "text": "memcpy(buffer, &gain, sizeof(gain)",
                    "rendered": {
                      "text": "memcpy(buffer, &gain, sizeof(gain)",
                      "markdown": "`memcpy(buffer, &gain, sizeof(gain)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/treelearner/split_info.hpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2236,
                        "charLength": 34
                      },
                      "insertedContent": {
                        "text": "memcpy_s(buffer, <size of buffer>,  &gain,  sizeof(gain)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-f8c3b8b1-602c-4385-abd3-8c4fc4e598a0",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/treelearner/split_info.hpp"
                },
                "region": {
                  "startLine": 64,
                  "startColumn": 9,
                  "endLine": 64,
                  "endColumn": 57,
                  "charOffset": 2141,
                  "charLength": 48,
                  "snippet": {
                    "text": "memcpy(buffer, &right_count, sizeof(right_count)",
                    "rendered": {
                      "text": "memcpy(buffer, &right_count, sizeof(right_count)",
                      "markdown": "`memcpy(buffer, &right_count, sizeof(right_count)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/treelearner/split_info.hpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2141,
                        "charLength": 48
                      },
                      "insertedContent": {
                        "text": "memcpy_s(buffer, <size of buffer>,  &right_count,  sizeof(right_count)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-b295e255-14b4-418e-a7e9-f042a2580def",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/treelearner/split_info.hpp"
                },
                "region": {
                  "startLine": 62,
                  "startColumn": 9,
                  "endLine": 62,
                  "endColumn": 55,
                  "charOffset": 2049,
                  "charLength": 46,
                  "snippet": {
                    "text": "memcpy(buffer, &left_count, sizeof(left_count)",
                    "rendered": {
                      "text": "memcpy(buffer, &left_count, sizeof(left_count)",
                      "markdown": "`memcpy(buffer, &left_count, sizeof(left_count)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/treelearner/split_info.hpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2049,
                        "charLength": 46
                      },
                      "insertedContent": {
                        "text": "memcpy_s(buffer, <size of buffer>,  &left_count,  sizeof(left_count)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-184ddb78-584e-405f-a1d1-f238bdc5dd8f",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/treelearner/split_info.hpp"
                },
                "region": {
                  "startLine": 60,
                  "startColumn": 9,
                  "endLine": 60,
                  "endColumn": 49,
                  "charOffset": 1966,
                  "charLength": 40,
                  "snippet": {
                    "text": "memcpy(buffer, &feature, sizeof(feature)",
                    "rendered": {
                      "text": "memcpy(buffer, &feature, sizeof(feature)",
                      "markdown": "`memcpy(buffer, &feature, sizeof(feature)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/treelearner/split_info.hpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1966,
                        "charLength": 40
                      },
                      "insertedContent": {
                        "text": "memcpy_s(buffer, <size of buffer>,  &feature,  sizeof(feature)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-f3b2ca8a-33aa-49e2-ba9a-67f3e1d14020",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/io/file_io.cpp"
                },
                "region": {
                  "startLine": 62,
                  "startColumn": 52,
                  "endLine": 62,
                  "endColumn": 70,
                  "charOffset": 1344,
                  "charLength": 18,
                  "snippet": {
                    "text": "strlen(kHdfsProto)",
                    "rendered": {
                      "text": "strlen(kHdfsProto)",
                      "markdown": "`strlen(kHdfsProto)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/io/file_io.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1344,
                        "charLength": 18
                      },
                      "insertedContent": {
                        "text": "strlen_s(kHdfsProto, <size of kHdfsProto>)"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/io/file_io.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1344,
                        "charLength": 18
                      },
                      "insertedContent": {
                        "text": "strnlen(kHdfsProto, <size of kHdfsProto>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-ce102fe2-99bc-46b1-b984-790ed2c09011",
          "kind": "fail",
          "level": "error",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/boosting/dart.hpp"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 23,
                  "endLine": 51,
                  "endColumn": 30,
                  "charOffset": 1393,
                  "charLength": 7,
                  "snippet": {
                    "text": "Random(",
                    "rendered": {
                      "text": "Random(",
                      "markdown": "`Random(`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.PRNG.Weak"
            ]
          }
        },
        {
          "ruleId": "glog-97cf0a1b-7fe5-4e8b-9498-bb0e20a2a37a",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/treelearner/data_partition.hpp"
                },
                "region": {
                  "startLine": 62,
                  "startColumn": 11,
                  "endLine": 62,
                  "endColumn": 93,
                  "charOffset": 1759,
                  "charLength": 82,
                  "snippet": {
                    "text": "memcpy(indices_.data(), used_data_indices_, used_data_count_ * sizeof(data_size_t)",
                    "rendered": {
                      "text": "memcpy(indices_.data(), used_data_indices_, used_data_count_ * sizeof(data_size_t)",
                      "markdown": "`memcpy(indices_.data(), used_data_indices_, used_data_count_ * sizeof(data_size_t)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/treelearner/data_partition.hpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1759,
                        "charLength": 82
                      },
                      "insertedContent": {
                        "text": "memcpy_s(indices_.data(), <size of indices_.data()>,  used_data_indices_,  used_data_count_ * sizeof(data_size_t)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-a3cb3cb8-ed75-450f-a8c4-ba2c0975259c",
          "kind": "fail",
          "level": "error",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/boosting/dart.hpp"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 23,
                  "endLine": 45,
                  "endColumn": 30,
                  "charOffset": 1230,
                  "charLength": 7,
                  "snippet": {
                    "text": "Random(",
                    "rendered": {
                      "text": "Random(",
                      "markdown": "`Random(`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.PRNG.Weak"
            ]
          }
        },
        {
          "ruleId": "glog-b9368c7a-8e2b-40c3-b40b-17b3020ac3d3",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/c_api.cpp"
                },
                "region": {
                  "startLine": 2486,
                  "startColumn": 9,
                  "endLine": 2486,
                  "endColumn": 49,
                  "charOffset": 98555,
                  "charLength": 40,
                  "snippet": {
                    "text": "memcpy(out_str, model.c_str(), *out_len)",
                    "rendered": {
                      "text": "memcpy(out_str, model.c_str(), *out_len)",
                      "markdown": "`memcpy(out_str, model.c_str(), *out_len)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/c_api.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 98555,
                        "charLength": 40
                      },
                      "insertedContent": {
                        "text": "memcpy_s(out_str, <size of out_str>,  model.c_str(),  *out_len)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-745f6b88-edc2-49ad-a921-8ab3d67cdaa7",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/c_api.cpp"
                },
                "region": {
                  "startLine": 2504,
                  "startColumn": 9,
                  "endLine": 2504,
                  "endColumn": 49,
                  "charOffset": 99263,
                  "charLength": 40,
                  "snippet": {
                    "text": "memcpy(out_str, model.c_str(), *out_len)",
                    "rendered": {
                      "text": "memcpy(out_str, model.c_str(), *out_len)",
                      "markdown": "`memcpy(out_str, model.c_str(), *out_len)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/c_api.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 99263,
                        "charLength": 40
                      },
                      "insertedContent": {
                        "text": "memcpy_s(out_str, <size of out_str>,  model.c_str(),  *out_len)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-798e25cd-758d-422f-9341-d147235e055a",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/c_api.cpp"
                },
                "region": {
                  "startLine": 1811,
                  "startColumn": 9,
                  "endLine": 1811,
                  "endColumn": 50,
                  "charOffset": 71083,
                  "charLength": 41,
                  "snippet": {
                    "text": "memcpy(out_str, params.c_str(), *out_len)",
                    "rendered": {
                      "text": "memcpy(out_str, params.c_str(), *out_len)",
                      "markdown": "`memcpy(out_str, params.c_str(), *out_len)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/c_api.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 71083,
                        "charLength": 41
                      },
                      "insertedContent": {
                        "text": "memcpy_s(out_str, <size of out_str>,  params.c_str(),  *out_len)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-c677fcb4-6538-484e-b701-6ccb9a37c247",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/c_api.cpp"
                },
                "region": {
                  "startLine": 1624,
                  "startColumn": 11,
                  "endLine": 1624,
                  "endColumn": 106,
                  "charOffset": 64800,
                  "charLength": 95,
                  "snippet": {
                    "text": "memcpy(feature_names[i], inside_feature_name[i].c_str(), std::min(inside_feature_name[i].size()",
                    "rendered": {
                      "text": "memcpy(feature_names[i], inside_feature_name[i].c_str(), std::min(inside_feature_name[i].size()",
                      "markdown": "`memcpy(feature_names[i], inside_feature_name[i].c_str(), std::min(inside_feature_name[i].size()`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/c_api.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 64800,
                        "charLength": 95
                      },
                      "insertedContent": {
                        "text": "memcpy_s(feature_names[i], <size of feature_names[i]>,  inside_feature_name[i].c_str(),  std::min(inside_feature_name[i].size()"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-07a77928-9ab5-45d2-9a25-559e31e57e05",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/c_api.cpp"
                },
                "region": {
                  "startLine": 950,
                  "startColumn": 2,
                  "endLine": 950,
                  "endColumn": 52,
                  "charOffset": 38358,
                  "charLength": 50,
                  "snippet": {
                    "text": "memcpy(out, sample_indices.data(), sizeof(int32_t)",
                    "rendered": {
                      "text": "memcpy(out, sample_indices.data(), sizeof(int32_t)",
                      "markdown": "`memcpy(out, sample_indices.data(), sizeof(int32_t)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/c_api.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 38358,
                        "charLength": 50
                      },
                      "insertedContent": {
                        "text": "memcpy_s(out, <size of out>,  sample_indices.data(),  sizeof(int32_t)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-5b2c39ad-1537-4173-8aa2-0afa29745124",
          "kind": "fail",
          "level": "error",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/c_api.cpp"
                },
                "region": {
                  "startLine": 915,
                  "startColumn": 9,
                  "endLine": 915,
                  "endColumn": 14,
                  "charOffset": 37274,
                  "charLength": 5,
                  "snippet": {
                    "text": "rand(",
                    "rendered": {
                      "text": "rand(",
                      "markdown": "`rand(`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.PRNG.Weak"
            ]
          }
        },
        {
          "ruleId": "glog-28cdb383-7801-4766-abf0-b5abe396f8f9",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/c_api.cpp"
                },
                "region": {
                  "startLine": 899,
                  "startColumn": 9,
                  "endLine": 899,
                  "endColumn": 51,
                  "charOffset": 36780,
                  "charLength": 42,
                  "snippet": {
                    "text": "memcpy(out_str, aliases.c_str(), *out_len)",
                    "rendered": {
                      "text": "memcpy(out_str, aliases.c_str(), *out_len)",
                      "markdown": "`memcpy(out_str, aliases.c_str(), *out_len)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/c_api.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 36780,
                        "charLength": 42
                      },
                      "insertedContent": {
                        "text": "memcpy_s(out_str, <size of out_str>,  aliases.c_str(),  *out_len)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-d58fe311-9054-48c6-b241-94061b154069",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/c_api.cpp"
                },
                "region": {
                  "startLine": 803,
                  "startColumn": 13,
                  "endLine": 803,
                  "endColumn": 69,
                  "charOffset": 33487,
                  "charLength": 56,
                  "snippet": {
                    "text": "memcpy(out_strs[idx], name.c_str(), std::min(name.size()",
                    "rendered": {
                      "text": "memcpy(out_strs[idx], name.c_str(), std::min(name.size()",
                      "markdown": "`memcpy(out_strs[idx], name.c_str(), std::min(name.size()`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/c_api.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 33487,
                        "charLength": 56
                      },
                      "insertedContent": {
                        "text": "memcpy_s(out_strs[idx], <size of out_strs[idx]>,  name.c_str(),  std::min(name.size()"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-b968419e-f16f-4b07-8902-7f2cd94a8706",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/c_api.cpp"
                },
                "region": {
                  "startLine": 787,
                  "startColumn": 15,
                  "endLine": 787,
                  "endColumn": 71,
                  "charOffset": 32963,
                  "charLength": 56,
                  "snippet": {
                    "text": "memcpy(out_strs[idx], name.c_str(), std::min(name.size()",
                    "rendered": {
                      "text": "memcpy(out_strs[idx], name.c_str(), std::min(name.size()",
                      "markdown": "`memcpy(out_strs[idx], name.c_str(), std::min(name.size()`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/c_api.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 32963,
                        "charLength": 56
                      },
                      "insertedContent": {
                        "text": "memcpy_s(out_strs[idx], <size of out_strs[idx]>,  name.c_str(),  std::min(name.size()"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-73439d49-e620-4d20-95e5-1af64e18905a",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/c_api.cpp"
                },
                "region": {
                  "startLine": 726,
                  "startColumn": 22,
                  "endLine": 726,
                  "endColumn": 39,
                  "charOffset": 30971,
                  "charLength": 17,
                  "snippet": {
                    "text": "strlen(model_str)",
                    "rendered": {
                      "text": "strlen(model_str)",
                      "markdown": "`strlen(model_str)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/c_api.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 30971,
                        "charLength": 17
                      },
                      "insertedContent": {
                        "text": "strlen_s(model_str, <size of model_str>)"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/c_api.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 30971,
                        "charLength": 17
                      },
                      "insertedContent": {
                        "text": "strnlen(model_str, <size of model_str>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-dee8e75a-106a-4f98-b38f-0deb24ce53bf",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/treelearner/parallel_tree_learner.h"
                },
                "region": {
                  "startLine": 222,
                  "startColumn": 13,
                  "endLine": 222,
                  "endColumn": 35,
                  "charOffset": 9144,
                  "charLength": 22,
                  "snippet": {
                    "text": "memcpy(dst, src, size)",
                    "rendered": {
                      "text": "memcpy(dst, src, size)",
                      "markdown": "`memcpy(dst, src, size)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/treelearner/parallel_tree_learner.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 9144,
                        "charLength": 22
                      },
                      "insertedContent": {
                        "text": "memcpy_s(dst, <size of dst>,  src,  size)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-f0ef59f5-c8a1-4a13-b00a-6fe0a2352d51",
          "kind": "fail",
          "level": "error",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "swig/StringArray.hpp"
                },
                "region": {
                  "startLine": 80,
                  "startColumn": 17,
                  "endLine": 80,
                  "endColumn": 54,
                  "charOffset": 2419,
                  "charLength": 37,
                  "snippet": {
                    "text": "strcpy(_array[index], content.c_str()",
                    "rendered": {
                      "text": "strcpy(_array[index], content.c_str()",
                      "markdown": "`strcpy(_array[index], content.c_str()`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "strcpy is frequently dangerous, as it will cause a buffer overflow if the source is larger than the destination."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "swig/StringArray.hpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2419,
                        "charLength": 37
                      },
                      "insertedContent": {
                        "text": "strcpy_s(_array[index], <size of _array[index]>,  content.c_str()"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "strcpy is frequently dangerous, as it will cause a buffer overflow if the source is larger than the destination."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "swig/StringArray.hpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2419,
                        "charLength": 37
                      },
                      "insertedContent": {
                        "text": "strlcpy(_array[index],  content.c_str(, <size of _array[index]>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "glog-892346e3-b6fc-448a-b612-705b9ba6f150",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "R-package/src/lightgbm_R.cpp"
                },
                "region": {
                  "startLine": 1037,
                  "startColumn": 7,
                  "endLine": 1037,
                  "endColumn": 67,
                  "charOffset": 33045,
                  "charLength": 60,
                  "snippet": {
                    "text": "memcpy(REAL(out_data_R), out_data, out_len[0]*sizeof(double)",
                    "rendered": {
                      "text": "memcpy(REAL(out_data_R), out_data, out_len[0]*sizeof(double)",
                      "markdown": "`memcpy(REAL(out_data_R), out_data, out_len[0]*sizeof(double)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "R-package/src/lightgbm_R.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 33045,
                        "charLength": 60
                      },
                      "insertedContent": {
                        "text": "memcpy_s(REAL(out_data_R), <size of REAL(out_data_R)>,  out_data,  out_len[0]*sizeof(double)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-ab7d587c-ef35-48be-b4a3-d610d11322fb",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "R-package/src/lightgbm_R.cpp"
                },
                "region": {
                  "startLine": 1035,
                  "startColumn": 7,
                  "endLine": 1035,
                  "endColumn": 71,
                  "charOffset": 32895,
                  "charLength": 64,
                  "snippet": {
                    "text": "memcpy(INTEGER(out_indptr_R), out_indptr, out_len[1]*sizeof(int)",
                    "rendered": {
                      "text": "memcpy(INTEGER(out_indptr_R), out_indptr, out_len[1]*sizeof(int)",
                      "markdown": "`memcpy(INTEGER(out_indptr_R), out_indptr, out_len[1]*sizeof(int)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "R-package/src/lightgbm_R.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 32895,
                        "charLength": 64
                      },
                      "insertedContent": {
                        "text": "memcpy_s(INTEGER(out_indptr_R), <size of INTEGER(out_indptr_R)>,  out_indptr,  out_len[1]*sizeof(int)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-1f3a21c4-f141-4908-bef4-9cd7350e3526",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "R-package/src/lightgbm_R.cpp"
                },
                "region": {
                  "startLine": 1036,
                  "startColumn": 7,
                  "endLine": 1036,
                  "endColumn": 73,
                  "charOffset": 32969,
                  "charLength": 66,
                  "snippet": {
                    "text": "memcpy(INTEGER(out_indices_R), out_indices, out_len[0]*sizeof(int)",
                    "rendered": {
                      "text": "memcpy(INTEGER(out_indices_R), out_indices, out_len[0]*sizeof(int)",
                      "markdown": "`memcpy(INTEGER(out_indices_R), out_indices, out_len[0]*sizeof(int)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "R-package/src/lightgbm_R.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 32969,
                        "charLength": 66
                      },
                      "insertedContent": {
                        "text": "memcpy_s(INTEGER(out_indices_R), <size of INTEGER(out_indices_R)>,  out_indices,  out_len[0]*sizeof(int)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        }
      ],
      "newlineSequences": [
        "\r\n",
        "\n"
      ]
    }
  ]
}